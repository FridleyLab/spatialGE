} else {
form1 = formula(Surv(mossurv, as.numeric(died)) ~ yeardx + ageatdx + stage + cohort + Groupspatabund + cluster(subjectid))
form2 = formula(Surv(mossurv, as.numeric(died)) ~ yeardx + ageatdx + stage + cohort + Groupabund + cluster(subjectid))
}
#fit models on filtered and cleaned data
model = coxph(form1,
data = tmp)
model_2 = coxph(form2,
data = tmp)
#extract model statistics
lrt_log_lik_full = summary(model)$loglik[2]
lrt_log_lik_clinical = summary(model_2)$loglik[2]
lrt = 2*(lrt_log_lik_full - lrt_log_lik_clinical)
#get degrees of freedom from models
p_value = 1-pchisq(lrt,summary(model)$waldtest[2] - summary(model_2)$waldtest[2])
#return model stats
return(list(Model_Stats = data.frame(anchor = combos$anchor[x],
counted = combos$counted[x],
Spatial_Contribution = p_value,
DF = summary(model)$waldtest[2] - summary(model_2)$waldtest[2],
SpatAbundLevs = paste(tmp$Groupspatabund %>% unique(), collapse = ", "),
AbundLevs = paste(tmp$Groupabund %>% unique(), collapse = ", "),
Notes = notes)))
})
#return for all markers
return(results)
}
#prep data by removing OPAL and replacing with +
t_cell_tumor = t_cell_tumor %>%
mutate(anchor = case_when(grepl("\\ \\(", anchor) ~ gsub("\\ \\(.*$", "\\+", anchor),
T ~ anchor),
counted = case_when(grepl("\\ \\(", counted) ~ gsub("\\ \\(.*$", "\\+", counted),
T ~ counted))
#run survival
t_cell_uni_res = calculate_survival_bivar(data = t_cell_tumor, filter_cols = c("Image Location", "anchor", "subjectid", "stage"))
#getting model summaries
#Getting the model summary for each marker
t_cell_coef_summary = lapply(t_cell_uni_res, function(marker){
marker$Model_Stats
}) %>%
do.call(bind_rows, .) %>%
mutate(across(c(`Spatial_Contribution`), ~formatC(.x, format = "e", digits = 3)))
install.packages('spaMM')
library('tidyverse')
library('nlme')
# Source spatialGE functions
devtools::load_all('../../spatialGE/')
# Create STlist from Visium data set (this step to easily extract count matrix)
fps = c('../../maynard_2021_prefrontal_cortex/data/151673/')
samples = '151673'
visium = STlist(rnacounts=fps, samples=samples)
visium = transform_data(visium)
rm(fps, samples) # Clean env
# Sample and gene to be used in example
samplename = '151673'
gene_i = c('PCP4')
# Prepare data with coordinate and expression data
# Add annotation data
# Add dummy grouping variable
df_tmp = visium@spatial_meta[[samplename]] %>%
select(libname, xpos, ypos) %>%
left_join(., tibble(libname=colnames(visium@tr_counts[[samplename]]),
geneexpr = as.vector(visium@tr_counts[[samplename]][gene_i, ])), by='libname') %>%
add_column(dummycol=1) %>%
column_to_rownames(var='libname')
# Calculate empirical variogram
geodata_tmp = geoR::as.geodata(df_tmp, coords.col=c('xpos', 'ypos'), data.col='geneexpr')
emp_variog_tmp = geoR::variog(geodata_tmp, uvec=100, trend='cte')
plot(emp_variog_tmp, pch=16, cex=0.5, ylim=c(0.4, 1.05))
# Estimate variogram parameters
## Create null model
# null_mod = nlme::lme(fixed=geneexpr ~ 1, data=df_tmp, random = ~ 1 | dummycol)
## Define correlation structures (value=2500 to specify range)
# exp_covstr = nlme::corExp(form = ~ xpos + ypos, nugget=T, metric='euclidean', value=2500)
# sph_covstr = nlme::corSpher(form = ~ xpos + ypos, nugget=T, metric='euclidean', value=2500)
# gau_covstr = nlme::corGaus(form = ~ xpos + ypos, nugget=T, metric='euclidean', value=2500)
## Estimate parameters by updating null models
# exp_mod = update(null_mod, correlation=exp_covstr, method="REML")
# sph_mod = update(null_mod, correlation=sph_covstr, method="REML")
# gau_mod = update(null_mod, correlation=gau_covstr, method="REML")
# Save models (take so much time to generate)
# saveRDS(exp_mod, paste0('../data/spatial_model_nlme_exp_covstruct', samplename, '_', gene_i, '.RDS'))
# saveRDS(sph_mod, paste0('../data/spatial_model_nlme_sph_covstruct', samplename, '_', gene_i, '.RDS'))
# saveRDS(gau_mod, paste0('../data/spatial_model_nlme_gau_covstruct', samplename, '_', gene_i, '.RDS'))
exp_mod = readRDS(paste0('../data/spatial_model_nlme_exp_covstruct', samplename, '_', gene_i, '.RDS'))
sph_mod = readRDS(paste0('../data/spatial_model_nlme_sph_covstruct', samplename, '_', gene_i, '.RDS'))
gau_mod = readRDS(paste0('../data/spatial_model_nlme_gau_covstruct', samplename, '_', gene_i, '.RDS'))
exp_vgm = geoR::variofit(emp_variog_tmp, fix.nugget=F, cov.model='exponential',
ini.cov.pars=c(exp_mod$sigma^2,
2500),
nugget=exp_mod$modelStruct$corStruct[2], max.dist=6000)
#nugget=ifelse(exp_mod$modelStruct$corStruct[2] < 0, 0, exp_mod$modelStruct$corStruct[2]))
sph_vgm = geoR::variofit(emp_variog_tmp, fix.nugget=F, cov.model='spherical',
ini.cov.pars=c(sph_mod$sigma^2,
2500),
nugget=sph_mod$modelStruct$corStruct[2], max.dist=6000)
#nugget=ifelse(sph_mod$modelStruct$corStruct[2] < 0, 0, sph_mod$modelStruct$corStruct[2]))
gau_vgm = geoR::variofit(emp_variog_tmp, fix.nugget=F, cov.model='gaussian',
ini.cov.pars=c(gau_mod$sigma^2,
2500),
nugget=gau_mod$modelStruct$corStruct[2], max.dist=6000)
#nugget=ifelse(gau_mod$modelStruct$corStruct[2] < 0, 0, gau_mod$modelStruct$corStruct[2]))
pdf(paste0('../figures/variogram_fit_models_', gene_i, '_expression.pdf'))
plot(emp_variog_tmp, pch=16, cex=0.5, ylim=c(0.4, 1.05), asp=10000, xaxp=c(0, 11000, 10))
text(c(1000, 700, 5500), c(0.52, 0.76, 0.6),
labels=c('nugget','sill', 'range'),
col=c('purple', 'green', 'goldenrod1'))
clip(x1=-1000, x2=6000, y1=-1, y2=0.8)
abline(h=0.73, col='green', lwd=3, lty=2)
abline(h=0.49, col='purple', lwd=3, lty=2)
abline(v=5000, col='goldenrod1', lwd=3, lty=2)
lines(exp_vgm, col='red', lwd=3)
lines(sph_vgm, col='blue', lwd=3)
lines(gau_vgm, col='orange', lwd=3)
dev.off()
exp_covstr_mtx = geoR::varcov.spatial(geodata_tmp[['coords']], cov.model='exponential',
nugget=exp_vgm$nugget,
cov.pars=exp_vgm$cov.pars,
scale=T)
sph_covstr_mtx = geoR::varcov.spatial(geodata_tmp[['coords']], cov.model='spherical',
nugget=sph_vgm$nugget,
cov.pars=sph_vgm$cov.pars,
scale=T)
gau_covstr_mtx = geoR::varcov.spatial(geodata_tmp[['coords']], cov.model='gaussian',
nugget=gau_vgm$nugget,
cov.pars=gau_vgm$cov.pars,
scale=T)
exp_covstr_mtx = exp_covstr_mtx$varcov
colnames(exp_covstr_mtx) = rownames(geodata_tmp[['coords']])
rownames(exp_covstr_mtx) = rownames(geodata_tmp[['coords']])
sph_covstr_mtx = sph_covstr_mtx$varcov
colnames(sph_covstr_mtx) = rownames(geodata_tmp[['coords']])
rownames(sph_covstr_mtx) = rownames(geodata_tmp[['coords']])
gau_covstr_mtx = gau_covstr_mtx$varcov
colnames(gau_covstr_mtx) = rownames(geodata_tmp[['coords']])
rownames(gau_covstr_mtx) = rownames(geodata_tmp[['coords']])
cov_df_tmp = tibble(covar_exp=exp_covstr_mtx[, 3350],
covar_sph=sph_covstr_mtx[, 3350],
covar_gau=gau_covstr_mtx[, 3350],
libname=rownames(exp_covstr_mtx)) %>%
left_join(., df_tmp %>%
rownames_to_column(var='libname'), by='libname')
# Create quilt plots showing covariance from a single spot
p1 = ggplot() +
geom_point(data=cov_df_tmp %>% filter(libname != "TCCATCAATACTAATC-1"),
aes(x=xpos, y=ypos, color=covar_exp), size=0.3) +
geom_point(data=cov_df_tmp %>% filter(libname == "TCCATCAATACTAATC-1"),
aes(x=xpos, y=ypos), color='black', shape=1, size=0.5) +
ggtitle('Exponential') +
ylab('Y spot position') +
xlab('X spot position') +
scale_color_gradient2(low='darkblue', high="darkred", midpoint=0.5) +
scale_y_reverse() +
coord_equal() +
theme_classic()
p2 = ggplot() +
geom_point(data=cov_df_tmp %>% filter(libname != "TCCATCAATACTAATC-1"),
aes(x=xpos, y=ypos, color=covar_sph), size=0.3) +
geom_point(data=cov_df_tmp %>% filter(libname == "TCCATCAATACTAATC-1"),
aes(x=xpos, y=ypos), color='black', shape=1, size=0.5) +
ggtitle('Spherical') +
ylab('Y spot position') +
xlab('X spot position') +
scale_color_gradient2(low='darkblue', high="darkred", midpoint=0.5) +
scale_y_reverse() +
coord_equal() +
theme_classic()
p3 = ggplot() +
geom_point(data=cov_df_tmp %>% filter(libname != "TCCATCAATACTAATC-1"),
aes(x=xpos, y=ypos, color=covar_gau), size=0.3) +
geom_point(data=cov_df_tmp %>% filter(libname == "TCCATCAATACTAATC-1"),
aes(x=xpos, y=ypos), color='black', shape=1, size=0.5) +
ggtitle('Gaussian') +
ylab('Y spot position') +
xlab('X spot position') +
scale_color_gradient2(low='darkblue', high="darkred", midpoint=0.5) +
scale_y_reverse() +
coord_equal() +
theme_classic()
pdf(paste0('../figures/quilt_plot_covariance_from_spot_', gene_i, '.pdf'), width=12, height=4)
print(ggpubr::ggarrange(p1, p2, p3, nrow=1, common.legend=T))
dev.off()
devtools::install_github("fridleylab/spatialGE@oospina_dev")
spatialGE::pseudobulk_plots()
exit
q()
q()
load('~/OneDrive - Moffitt Cancer Center/u01_spatialge_web_shared/normalized_stlist.RData')
grep('MYC', unlist(lapply(normalized_stlist@tr_counts, function(i){rownames(i)})), value=T)
grep('MYC$', unlist(lapply(normalized_stlist@tr_counts, function(i){rownames(i)})), value=T)
grep('TP53$', unlist(lapply(normalized_stlist@tr_counts, function(i){rownames(i)})), value=T)
grep('BRCA1$', unlist(lapply(normalized_stlist@tr_counts, function(i){rownames(i)})), value=T)
grep('OARD1$', unlist(lapply(normalized_stlist@tr_counts, function(i){rownames(i)})), value=T)
test = readRDS('~/Dropbox (Moffitt Cancer Center)/SPATIAL_TRANSCRIPTOMICS/visium_lmm_smalley/diff_gene_expr_louvainclusters_merged_and_separate/results/de_genes_separate_seuratobjs_visium_log_louvainclusters.RDS')
test
openxlsx::write.xlsx(test, '~/Desktop/de_genes.xlsx')
openxlsx::write.xlsx(x = test, '~/Desktop/de_genes.xlsx')
openxlsx::write.xlsx(x = test, '~/Desktop/de_genes.xlsx')
class(test)
test$sample1_MB14_A
head(test$sample1_MB14_A)
openxlsx::write.xlsx(x = test$sample8_LMM_B3, '~/Desktop/de_genes.xlsx')
install.packages('spatialTIME')
library('Seurat')
tmp = Seurat::Load10X_Spatial("../../visium_lmm_smalley/smalley_raw_visium_data/smalley_visium_second_run/smalley_visium_combined1_2_runs_sprangercount/sample1_MB14_A_ManualAlignmt/sample1_MB14_A_ManualAlignmt/outs/")
tmp = Seurat::Load10X_Spatial("~/Dropbox (Moffitt Cancer Center)/SPATIAL_TRANSCRIPTOMICS/visium_lmm_smalley/smalley_raw_visium_data/smalley_visium_second_run/smalley_visium_combined1_2_runs_sprangercount/sample1_MB14_A_ManualAlignmt/sample1_MB14_A_ManualAlignmt/outs/")
dim(tmp)
rownames(tmp)
head(duplicated(rownames(tmp)))
sum(duplicated(rownames(tmp)))
setwd('~/Dropbox (Moffitt Cancer Center)/SPATIAL_TRANSCRIPTOMICS/spatialGE/')
setwd('~/Dropbox (Moffitt Cancer Center)/SPATIAL_TRANSCRIPTOMICS/spatialGE/')
setwd('~/Dropbox (Moffitt Cancer Center)/SPATIAL_TRANSCRIPTOMICS/spatialGE/')
fp = '../cosmx_smi_lung_nsclc_nanostring/data/Processed Data Giotto Object/SMI_Giotto_Object.RData'
load(fp)
tissue = c('Lung9_Rep2', 'Lung9_Rep1', 'Lung13')
fovs = c(31, 1, 5)
expr_ls = list()
coord_ls = list()
for(i in 1:length(tissue)){
cells = gem@cell_metadata$rna$cell_ID[gem@cell_metadata$rna$Run_Tissue_name == tissue[i] & gem@cell_metadata$rna$fov == fovs[i] ]
expr_ls[[paste0(tissue[i], '_', fovs[i])]] = as.data.frame(gem@expression$rna$raw[, cells]) %>% rownames_to_column('gene')
coord_ls[[paste0(tissue[i], '_', fovs[i])]] = gem@spatial_locs$raw[gem@spatial_locs$raw$cell_ID %in% cells, ] %>% select(c('cell_ID', 'sdimy', 'sdimx'))
rm(cells) # Clean env
}
library('tidyverse')
tissue = c('Lung9_Rep2', 'Lung9_Rep1', 'Lung13')
fovs = c(31, 1, 5)
expr_ls = list()
coord_ls = list()
for(i in 1:length(tissue)){
cells = gem@cell_metadata$rna$cell_ID[gem@cell_metadata$rna$Run_Tissue_name == tissue[i] & gem@cell_metadata$rna$fov == fovs[i] ]
expr_ls[[paste0(tissue[i], '_', fovs[i])]] = as.data.frame(gem@expression$rna$raw[, cells]) %>% rownames_to_column('gene')
coord_ls[[paste0(tissue[i], '_', fovs[i])]] = gem@spatial_locs$raw[gem@spatial_locs$raw$cell_ID %in% cells, ] %>% select(c('cell_ID', 'sdimy', 'sdimx'))
rm(cells) # Clean env
}
devtools::load_all('./')
tissue = c('Lung9_Rep2', 'Lung9_Rep1', 'Lung13')
fovs = c(31, 1, 5)
expr_ls = list()
coord_ls = list()
for(i in 1:length(tissue)){
cells = gem@cell_metadata$rna$cell_ID[gem@cell_metadata$rna$Run_Tissue_name == tissue[i] & gem@cell_metadata$rna$fov == fovs[i] ]
expr_ls[[paste0(tissue[i], '_', fovs[i])]] = as.data.frame(gem@expression$rna$raw[, cells]) %>% rownames_to_column('gene')
coord_ls[[paste0(tissue[i], '_', fovs[i])]] = gem@spatial_locs$raw[gem@spatial_locs$raw$cell_ID %in% cells, ] %>% select(c('cell_ID', 'sdimy', 'sdimx'))
rm(cells) # Clean env
}
rm(tissue, fovs) # Clean env
lung_stlist = STlist(rnacounts=expr_ls, spotcoords=coord_ls)
lung_stlist_filt = filter_data(lung_stlist, spot_minreads=100)
lung_stlist_filt = transform_data(lung_stlist_filt)
p2 = STplot(lung_stlist_filt, plot_meta='total_counts')
p2$Lung13_5_total_counts
devtools::load_all('./')
p2 = STplot(lung_stlist_filt, plot_meta='total_counts')
p2$Lung13_5_total_counts
?scale_color_distiller
p2 = STplot(lung_stlist_filt, plot_meta='total_counts', color_pal = 'Spectral')
p2$Lung13_5_total_counts
devtools::load_all('./')
p2 = STplot(lung_stlist_filt, plot_meta='total_counts', color_pal = 'Spectral')
p2$Lung13_5_total_counts
devtools::load_all('./')
p2 = STplot(lung_stlist_filt, plot_meta='total_counts', color_pal = 'Spectral')
p2$Lung13_5_total_counts
devtools::load_all('./')
p2 = STplot(lung_stlist_filt, plot_meta='total_counts', color_pal = 'Greens')
p2
devtools::load_all('./')
p2 = STplot(lung_stlist_filt, plot_meta='total_counts', color_pal = 'Greens')
p2
devtools::load_all('./')
p2 = STplot(lung_stlist_filt, plot_meta='total_counts', color_pal = 'Greens')
p2$Lung13_5_total_counts
devtools::load_all('./')
setwd('~/Dropbox (Moffitt Cancer Center)/SPATIAL_TRANSCRIPTOMICS/spatialGE/')
fp = '../cosmx_smi_lung_nsclc_nanostring/data/Processed Data Giotto Object/SMI_Giotto_Object.RData'
load(fp)
tissue = c('Lung9_Rep2', 'Lung9_Rep1', 'Lung13')
fovs = c(31, 1, 5)
expr_ls = list()
coord_ls = list()
for(i in 1:length(tissue)){
cells = gem@cell_metadata$rna$cell_ID[gem@cell_metadata$rna$Run_Tissue_name == tissue[i] & gem@cell_metadata$rna$fov == fovs[i] ]
expr_ls[[paste0(tissue[i], '_', fovs[i])]] = as.data.frame(gem@expression$rna$raw[, cells]) %>% rownames_to_column('gene')
coord_ls[[paste0(tissue[i], '_', fovs[i])]] = gem@spatial_locs$raw[gem@spatial_locs$raw$cell_ID %in% cells, ] %>%
select(c('cell_ID', 'sdimy', 'sdimx')) %>% as.data.frame()
rm(cells) # Clean env
}
rm(tissue, fovs) # Clean env
lung_stlist = STlist(rnacounts=expr_ls, spotcoords=coord_ls)
lung_stlist_filt = filter_data(lung_stlist, spot_minreads=100)
lung_stlist_filt = transform_data(lung_stlist_filt)
p2 = STplot(lung_stlist_filt, plot_meta='total_counts', color_pal = 'Greens')
p2$Lung13_5_total_counts
p2$Lung9_Rep2_31_total_counts
head(lung_stlist_filt@spatial_meta$Lung13_5)
tissue = c('Lung9_Rep2', 'Lung9_Rep1', 'Lung13')
fovs = c(31, 1, 5)
expr_ls = list()
coord_ls = list()
for(i in 1:length(tissue)){
cells = gem@cell_metadata$rna$cell_ID[gem@cell_metadata$rna$Run_Tissue_name == tissue[i] & gem@cell_metadata$rna$fov == fovs[i] ]
expr_ls[[paste0(tissue[i], '_', fovs[i])]] = as.data.frame(gem@expression$rna$raw[, cells]) %>% rownames_to_column('gene')
coord_ls[[paste0(tissue[i], '_', fovs[i])]] = gem@spatial_locs$raw[gem@spatial_locs$raw$cell_ID %in% cells, ] %>%
select(c('cell_ID', 'sdimy', 'sdimx')) %>% as_tibble()
rm(cells) # Clean env
}
rm(tissue, fovs) # Clean env
lung_stlist = STlist(rnacounts=expr_ls, spotcoords=coord_ls)
lung_stlist_filt = filter_data(lung_stlist, spot_minreads=100)
lung_stlist_filt = transform_data(lung_stlist_filt)
p2 = STplot(lung_stlist_filt, plot_meta='total_counts', color_pal = 'Greens')
p2$Lung13_5_total_counts
library('tidyverse')
devtools::load_all('./')
setwd('~/Dropbox (Moffitt Cancer Center)/SPATIAL_TRANSCRIPTOMICS/spatialGE/')
#fp = '../cosmx_smi_lung_nsclc_nanostring/data/Processed Data Giotto Object/SMI_Giotto_Object.RData'
#load(fp)
rm(list=grep('gem', ls(), value = T, invert = T))
tissue = c('Lung9_Rep2', 'Lung9_Rep1', 'Lung13')
fovs = c(31, 1, 5)
expr_ls = list()
coord_ls = list()
for(i in 1:length(tissue)){
cells = gem@cell_metadata$rna$cell_ID[gem@cell_metadata$rna$Run_Tissue_name == tissue[i] & gem@cell_metadata$rna$fov == fovs[i] ]
expr_ls[[paste0(tissue[i], '_', fovs[i])]] = as.data.frame(gem@expression$rna$raw[, cells]) %>% rownames_to_column('gene')
coord_ls[[paste0(tissue[i], '_', fovs[i])]] = gem@spatial_locs$raw[gem@spatial_locs$raw$cell_ID %in% cells, ] %>%
select(c('cell_ID', 'sdimy', 'sdimx')) %>% as_tibble()
rm(cells) # Clean env
}
rm(tissue, fovs) # Clean env
lung_stlist = STlist(rnacounts=expr_ls, spotcoords=coord_ls)
lung_stlist_filt = filter_data(lung_stlist, spot_minreads=100)
lung_stlist_filt = transform_data(lung_stlist_filt)
p2 = STplot(lung_stlist_filt, plot_meta='total_counts', color_pal = 'Greens')
p2$Lung13_5_total_counts
x=lung_stlist_filt
samples=NULL
ks='dtc'
ws=NULL
deepSplit=NULL
plot_meta='total_counts'
color_pal=NULL
visium=T
ptsize=NULL
library('tidyverse')
devtools::load_all('./')
setwd('~/Dropbox (Moffitt Cancer Center)/SPATIAL_TRANSCRIPTOMICS/spatialGE/')
#fp = '../cosmx_smi_lung_nsclc_nanostring/data/Processed Data Giotto Object/SMI_Giotto_Object.RData'
#load(fp)
rm(list=grep('gem|lung_stlist', ls(), value = T, invert = T))
tissue = c('Lung9_Rep2', 'Lung9_Rep1', 'Lung13')
fovs = c(31, 1, 5)
expr_ls = list()
coord_ls = list()
for(i in 1:length(tissue)){
cells = gem@cell_metadata$rna$cell_ID[gem@cell_metadata$rna$Run_Tissue_name == tissue[i] & gem@cell_metadata$rna$fov == fovs[i] ]
expr_ls[[paste0(tissue[i], '_', fovs[i])]] = as.data.frame(gem@expression$rna$raw[, cells]) %>% rownames_to_column('gene')
coord_ls[[paste0(tissue[i], '_', fovs[i])]] = gem@spatial_locs$raw[gem@spatial_locs$raw$cell_ID %in% cells, ] %>%
select(c('cell_ID', 'sdimy', 'sdimx')) %>% as_tibble()
rm(cells) # Clean env
}
rm(tissue, fovs) # Clean env
lung_stlist = STlist(rnacounts=expr_ls, spotcoords=coord_ls)
lung_stlist_filt = filter_data(lung_stlist, spot_minreads=100)
lung_stlist_filt = transform_data(lung_stlist_filt)
p2 = STplot(lung_stlist_filt, plot_meta='total_counts', color_pal = 'Greens')
library('tidyverse')
devtools::load_all('./')
setwd('~/Dropbox (Moffitt Cancer Center)/SPATIAL_TRANSCRIPTOMICS/spatialGE/')
#fp = '../cosmx_smi_lung_nsclc_nanostring/data/Processed Data Giotto Object/SMI_Giotto_Object.RData'
#load(fp)
rm(list=grep('gem|lung_stlist', ls(), value = T, invert = T))
# tissue = c('Lung9_Rep2', 'Lung9_Rep1', 'Lung13')
# fovs = c(31, 1, 5)
# expr_ls = list()
# coord_ls = list()
# for(i in 1:length(tissue)){
#   cells = gem@cell_metadata$rna$cell_ID[gem@cell_metadata$rna$Run_Tissue_name == tissue[i] & gem@cell_metadata$rna$fov == fovs[i] ]
#   expr_ls[[paste0(tissue[i], '_', fovs[i])]] = as.data.frame(gem@expression$rna$raw[, cells]) %>% rownames_to_column('gene')
#   coord_ls[[paste0(tissue[i], '_', fovs[i])]] = gem@spatial_locs$raw[gem@spatial_locs$raw$cell_ID %in% cells, ] %>%
#     select(c('cell_ID', 'sdimy', 'sdimx')) %>% as_tibble()
#   rm(cells) # Clean env
# }
# rm(tissue, fovs) # Clean env
#
# lung_stlist = STlist(rnacounts=expr_ls, spotcoords=coord_ls)
#
# lung_stlist_filt = filter_data(lung_stlist, spot_minreads=100)
# lung_stlist_filt = transform_data(lung_stlist_filt)
p2 = STplot(lung_stlist_filt, plot_meta='total_counts', color_pal = 'Greens')
x=lung_stlist_filt
samples=NULL
ks='dtc'
ws=NULL
deepSplit=NULL
plot_meta='total_counts'
color_pal=NULL
visium=T
ptsize=NULL
# Define which samples to plot
if(is.null(samples)){
samples = names(x@spatial_meta)
} else{
if(is.numeric(samples)){
samples = names(x@spatial_meta)[samples]
}
if(length(grep(paste0(samples, collapse='|'), names(x@spatial_meta))) == 0){
stop('The requested samples are not present in the STList spatial metadata.')
}
}
# Define columns to plot
if(is.null(plot_meta)){
plot_meta = grep('^stclust_spw', colnames(x@spatial_meta[[1]]), value=T)
if(!is.null(ws)){
if(any(ws == 0)){ # To avoid zero ('0') matching other weights
ws_tmp = ws[ws != 0]
plot_meta_tmp = grep('stclust_spw0_|stclust_spw0$', plot_meta, value=T)
if(length(ws_tmp) > 0){ # In case there are other ws in addition to '0'
plot_meta = c(plot_meta_tmp,
grep(paste0('stclust_spw', ws_tmp, collapse='|'), plot_meta, value=T))
} else{
plot_meta = plot_meta_tmp
}
rm(ws_tmp, plot_meta_tmp)
} else{
plot_meta = grep(paste0('stclust_spw', ws, collapse='|'), plot_meta, value=T)
}
}
if(ks[1] != 'dtc'){
plot_meta = grep(paste0('_k', ks,'$', collapse='|'), plot_meta, value=T)
} else if(ks[1] == 'dtc'){
if(!is.null(deepSplit)){
plot_meta = grep(paste0('_dspl', stringr::str_to_title(as.character(deepSplit)), '$', collapse='|'), plot_meta, value=T)
} else{
plot_meta = grep('_dspl', plot_meta, value=T)
}
} else{
stop('Specify one or several k values to plot, or use ks=\'dtc\' (default).')
}
}
# Check that the meta data column exists
if(length(grep(paste0('^', plot_meta, '$', collapse='|'),  colnames(x@spatial_meta[[1]]))) == 0){
stop('No metadata column or clustering parameters were specified. Or specified parameters do not exist in metadata.')
}
s=samples[1]
s
plot_list = list()
df_tmp = x@spatial_meta[[s]]
# Define size of points
if(is.null(ptsize)){
ptsize = 0.5
}
df_tmp
metacol
metacol=plot_meta
metacol
# Set default color if NULL input
if(is.null(color_pal)){
color_pal = 'light'
if(is.numeric(x@spatial_meta[[s]][[metacol]])){
color_pal = 'sunset'
}
}
df_tmp2 = df_tmp %>%
dplyr::select(libname, ypos, xpos, meta:=!!metacol)
if(!is.numeric(df_tmp2[['meta']]) & length(unique(df_tmp2[['meta']])) < 100){
# Convert meta data to factor
df_tmp2 = df_tmp2 %>%
dplyr::mutate(meta=tidyr::replace_na(as.character(meta), 'No_Data')) %>%
dplyr::mutate(meta=as.factor(meta))
# Create color palette.
meta_cols = color_parse(color_pal, n_cats=length(unique(df_tmp2[['meta']])))
names(meta_cols) = unique(df_tmp2[['meta']])
if(any(names(meta_cols) == 'No_Data')){
meta_cols[names(meta_cols) == 'No_Data'] = 'gray50'
}
}
# Prepare titles for plots
if(grepl('^stclust_', metacol)){
title_w = as.character(stringr::str_extract(metacol, paste0("spw0\\.?[0-9]*"))) %>% gsub('spw', '', .)
if(grepl('_k[0-9]+$', metacol)){
title_k = as.character(stringr::str_extract(metacol, paste0("_k[0-9]+"))) %>% gsub('_k', '', .)
title_p = paste0("STclust k=", title_k, "\nspatial weight=", title_w, '\nsample: ')
} else if(grepl('_dspl[\\.0-9TrueFalse]+$', metacol)){
title_dspl = stringr::str_extract(metacol, '[\\.0-9]+$|True$|False$')
title_p = paste0("STclust (dtc; deepSplit=", title_dspl, ")\nSpatial weight=", title_w, '\nSample: ')
}
title_p = paste0(title_p, s)
title_leg = 'Clusters'
} else{
title_p = paste0('Sample: ', s)
title_leg = plot_meta
}
# Create plot
p = ggplot2::ggplot(df_tmp2) +
ggplot2::geom_point(ggplot2::aes(x=xpos, y=ypos, color=meta), size=ptsize)
p
is.factor(df_tmp2[['meta']])
!is.null(color_pal)
#p = p + ggplot2::ggtitle(title_p) + ggplot2::theme_void() # MAY 09, 2023 PUT META DATA NAME ON LEGEND TITLE, NOT PLOT TITLE
p = p +
ggplot2::guides(color=guide_legend(override.aes=list(size=ptsize+1))) +
labs(color=title_leg, title=title_p) + ggplot2::theme_void()
p
is.factor(df_tmp2[['meta']])
is.numeric(df_tmp2[['meta']])
devtools::load_all('./')
devtools::load_all('./')
p2 = STplot(lung_stlist_filt, plot_meta='total_counts', color_pal = 'Greens')
p2$Lung13_5_total_counts
