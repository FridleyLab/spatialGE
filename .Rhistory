}
}
cat(crayon::green$bold(paste("Found", length(filepaths$sampleids)-missingSamples, "Visium Samples\n")))
# Define number of available cores to use.
cores = count_cores(length(filepaths[['count_found']]))
# Process Visium folder.
visium_processed = import_Visium(features_fp=fp_list[[i]][['features']],
barcodes_fp=fp_list[[i]][['barcodes']],
counts_fp=fp_list[[i]][['counts']],
coords_fp=fp_list[[i]][['coords']])
source('~/Dropbox (Moffitt Cancer Center)/SPATIAL_TRANSCRIPTOMICS/code/spatialGE/R/classDefinitions.R')
source('~/Dropbox (Moffitt Cancer Center)/SPATIAL_TRANSCRIPTOMICS/code/spatialGE/R/detect_input.R')
source('~/Dropbox (Moffitt Cancer Center)/SPATIAL_TRANSCRIPTOMICS/code/spatialGE/R/STList.R')
source('~/Dropbox (Moffitt Cancer Center)/SPATIAL_TRANSCRIPTOMICS/code/spatialGE/R/import_visium.R')
source('~/Dropbox (Moffitt Cancer Center)/SPATIAL_TRANSCRIPTOMICS/code/spatialGE/R/import_geomx.R')
source('~/Dropbox (Moffitt Cancer Center)/SPATIAL_TRANSCRIPTOMICS/code/spatialGE/R/utils.R')
spotcoords=NULL
samples=c('sample12_LMM_B4', 'Human_Ovarian', 'sample3_LMM_A3')
gmx_pkc=NULL
gmx_slide_col = NULL
gmx_roi_col=NULL
gmx_x_col=NULL
gmx_y_col=NULL
gmx_meta_cols=NULL
rnacounts = c('/Users/4472525/Dropbox (Moffitt Cancer Center)/SPATIAL_TRANSCRIPTOMICS/visium_data_InnaSmalley/smalley_raw_visium_data/smalley_visium_second_run/smalley_visium_combined1_2_runs_sprangercount/sample12_LMM_B4_ManualAlignmt',
'/Users/4472525/Dropbox (Moffitt Cancer Center)/SPATIAL_TRANSCRIPTOMICS/visium_data_InnaSmalley/smalley_raw_visium_data/smalley_visium_second_run/smalley_visium_combined1_2_runs_sprangercount/sample3_LMM_A3_ManualAlignmt/sample3_LMM_A3_ManualAlignmt/outs',
'/Users/4472525/Dropbox (Moffitt Cancer Center)/SPATIAL_TRANSCRIPTOMICS/visium_datasets_10X/Human_Ovarian_Cancer_WholeTranscriptomeAnalysis_Extracted')
exampleSTList = STList(rnacounts, samples=samples)
dim(exampleSTList)
View(import_Visium)
source('~/Dropbox (Moffitt Cancer Center)/SPATIAL_TRANSCRIPTOMICS/code/spatialGE/R/classDefinitions.R')
source('~/Dropbox (Moffitt Cancer Center)/SPATIAL_TRANSCRIPTOMICS/code/spatialGE/R/detect_input.R')
source('~/Dropbox (Moffitt Cancer Center)/SPATIAL_TRANSCRIPTOMICS/code/spatialGE/R/STList.R')
source('~/Dropbox (Moffitt Cancer Center)/SPATIAL_TRANSCRIPTOMICS/code/spatialGE/R/import_visium.R')
source('~/Dropbox (Moffitt Cancer Center)/SPATIAL_TRANSCRIPTOMICS/code/spatialGE/R/import_geomx.R')
source('~/Dropbox (Moffitt Cancer Center)/SPATIAL_TRANSCRIPTOMICS/code/spatialGE/R/utils.R')
spotcoords=NULL
samples=c('sample12_LMM_B4', 'Human_Ovarian', 'sample3_LMM_A3')
gmx_pkc=NULL
gmx_slide_col = NULL
gmx_roi_col=NULL
gmx_x_col=NULL
gmx_y_col=NULL
gmx_meta_cols=NULL
rnacounts = c('/Users/4472525/Dropbox (Moffitt Cancer Center)/SPATIAL_TRANSCRIPTOMICS/visium_data_InnaSmalley/smalley_raw_visium_data/smalley_visium_second_run/smalley_visium_combined1_2_runs_sprangercount/sample12_LMM_B4_ManualAlignmt',
'/Users/4472525/Dropbox (Moffitt Cancer Center)/SPATIAL_TRANSCRIPTOMICS/visium_data_InnaSmalley/smalley_raw_visium_data/smalley_visium_second_run/smalley_visium_combined1_2_runs_sprangercount/sample3_LMM_A3_ManualAlignmt/sample3_LMM_A3_ManualAlignmt/outs',
'/Users/4472525/Dropbox (Moffitt Cancer Center)/SPATIAL_TRANSCRIPTOMICS/visium_datasets_10X/Human_Ovarian_Cancer_WholeTranscriptomeAnalysis_Extracted')
# Check input type.
input_check = detect_input(rnacounts=rnacounts, spotcoords=spotcoords, samples=samples)
# Output error if input_check is empty (likely input format not recognized).
if(rlang::is_empty(input_check)){
stop('Input not recognized. Please refer to documentation.')
}
# CASE: NAMED LIST OF DATAFRAMES WITH COUNTS AND NAMED LIST OF DATA FRAMES WITH COORDINATES.
# METADATA INFO OPTIONAL.
if(!is.null(input_check$rna)){
if(input_check$rna[1] == 'list_dfs' && input_check$coords[1] == 'list_dfs'){
cat(crayon::yellow(paste("Found List of Dataframes...\n")))
pre_lists = read_list_dfs(rnacounts, spotcoords)
}
}
# CASE: SEURAT OBJECT
if(!is.null(input_check$rna)){
if(input_check$rna[1] == 'seurat'){
cat(crayon::yellow(paste("Found Seurat object.\n")))
pre_lists = read_seurat(rnacounts)
img_obj = pre_lists[['images']]
platform = 'visium'
}
}
# CASE: GEOMX INPUT
if(!is.null(input_check$rna)){
if(input_check$rna[1] == 'geomx_dcc'){
cat(crayon::yellow(paste("Found GeoMx DCC output.\n")))
pre_lists = import_Geomx(dcc=rnacounts, pkc=gmx_pkc, annots=samples, slide_col=gmx_slide_col, id_col=gmx_roi_col, x_col=gmx_x_col, y_col=gmx_y_col)
platform = 'geomx'
}
}
# CASE: SAMPLE FIlE ONLY CONTAINING FILE PATH(S) TO COUNT COORDINATE MATRICES OR VISIUM DIRS
if(is.null(rnacounts) && is.null(input_check$coords) && !is.null(input_check$samples)){
# Get list of filepaths
filepaths = process_sample_filepaths(samples, input_check)
# Check if input is Visium or count/coord matrices
if(input_check$samples[1] == 'samplesfile_visium'){
cat(crayon::yellow(paste("Found Visium Data.\n")))
pre_lists = read_visium_outs(filepaths)
img_obj = pre_lists[['images']]
platform = 'visium'
} else{
cat(crayon::yellow(paste("Found Matrix Data.\n")))
pre_lists = read_matrices_fps(filepaths)
}
}
# CASE: SAMPLE FIlE PLUS FILE PATH(S) TO COUNT COORDINATE MATRICES OR VISIUM DIRS
if(!is.null(rnacounts) && (input_check$samples[1] == 'samplesfile_visium' || input_check$samples[1] == 'samplesfile')){
if(input_check$rna[1] != 'list_dfs'){
# Get list of filepaths
filepaths = process_sample_names_from_file(rnacounts, spotcoords, samples, input_check)
# Check if input is Visium or count/coord matrices
if(input_check$rna[1] == 'visium_out'){
cat(crayon::yellow(paste("Found Visium Data.\n")))
pre_lists = read_visium_outs(filepaths)
img_obj = pre_lists[['images']]
platform = 'visium'
} else{
cat(crayon::yellow(paste("Found Matrix Data.\n")))
pre_lists = read_matrices_fps(filepaths)
}
}
}
# CASE: FILE PATH(S) TO COUNT/COORDINATES MATRICES OR VISIUM DIRS, AND SAMPLE NAMES VECTOR.
if(input_check$samples == 'sample_names' && !is.null(rnacounts)){
if(input_check$rna[1] != 'list_dfs'){
# Get list of filepaths
filepaths = process_sample_names(rnacounts, spotcoords, samples, input_check)
# Check if input is Visium or count/coord matrices
if(input_check$rna[1] == 'visium_out'){
cat(crayon::yellow(paste("Found Visium Data.\n")))
pre_lists = read_visium_outs(filepaths)
img_obj = pre_lists[['images']]
platform = 'visium'
} else{
cat(crayon::yellow(paste("Found Matrix Data.\n")))
pre_lists = read_matrices_fps(filepaths)
}
}
}
# Find necessary files from visium input
missingSamples = 0
fp_list = list()
for(i in 1:length(filepaths[['count_found']])){
# Get all system paths within output folder.
temp_fps = list.files(filepaths[['count_found']][i], recursive=T, include.dirs=T, full.names=T)
# Find matches of relevant files wihtin output folders.
vfeatures = grep('filtered_feature_bc_matrix/features.tsv.gz',  temp_fps, value=T)
vbarcodes = grep('filtered_feature_bc_matrix/barcodes.tsv.gz', temp_fps, value=T)
vcounts = grep('filtered_feature_bc_matrix/matrix.mtx.gz', temp_fps, value=T)
vcoords = grep('spatial/tissue_positions_list.csv', temp_fps, value=T)
vimage = grep('spatial/tissue_lowres_image.png', temp_fps, value=T)
# Filter out 'SPATIAL_RNA_COUNTER' folders (intermediate files from Space Ranger?).
vcoords = vcoords[!grepl('SPATIAL_RNA_COUNTER', vcoords)]
# Test that all files have been found.
needed_fps_test = c(!grepl('gz', vfeatures), !grepl('gz', vbarcodes), !grepl('gz', vcounts), !grepl('csv', vcoords))
if(any(needed_fps_test)){
stop(paste0('Visium output folder (', filepaths[['count_found']][i], ') does not have all necessary files.'))
}
fp_list[[i]] = list()
fp_list[[i]]$features = vfeatures
fp_list[[i]]$barcodes = vbarcodes
fp_list[[i]]$counts = vcounts
fp_list[[i]]$coords = vcoords
fp_list[[i]]$image = vimage
fp_list[[i]]$runname = filepaths[['sampleids']][i]
if(rlang::is_empty(vfeatures)) cat(crayon::red(paste("Features for", filepaths$sampleids[i], "not able to be found...")))
if(rlang::is_empty(vbarcodes)) cat(crayon::red(paste("Barcodes for", filepaths$sampleids[i], "not able to be found...")))
if(rlang::is_empty(vcounts)) cat(crayon::red(paste("Counts for", filepaths$sampleids[i], "not able to be found...")))
if(rlang::is_empty(vcoords)) cat(crayon::red(paste("Coordinates for", filepaths$sampleids[i], "not able to be found...")))
if(rlang::is_empty(vfeatures) | rlang::is_empty(vbarcodes) | rlang::is_empty(vcounts) | rlang::is_empty(vcoords)){
fp_list[[i]] = list()
missingSamples  = missingSamples + 1
}
}
cat(crayon::green$bold(paste("Found", length(filepaths$sampleids)-missingSamples, "Visium Samples\n")))
# Define number of available cores to use.
cores = count_cores(length(filepaths[['count_found']]))
i=1
View(fp_list)
View(fp_list)
fp_list[[1]]$features
fp_list[[1]]$barcodes
fp_list[[1]]$counts
fp_list[[1]]$coords
features_fp= "/Users/4472525/Dropbox (Moffitt Cancer Center)/SPATIAL_TRANSCRIPTOMICS/visium_data_InnaSmalley/smalley_raw_visium_data/smalley_visium_second_run/smalley_visium_combined1_2_runs_sprangercount/sample12_LMM_B4_ManualAlignmt/sample12_LMM_B4_ManualAlignmt/outs/filtered_feature_bc_matrix/features.tsv.gz"
barcodes_fp= "/Users/4472525/Dropbox (Moffitt Cancer Center)/SPATIAL_TRANSCRIPTOMICS/visium_data_InnaSmalley/smalley_raw_visium_data/smalley_visium_second_run/smalley_visium_combined1_2_runs_sprangercount/sample12_LMM_B4_ManualAlignmt/sample12_LMM_B4_ManualAlignmt/outs/filtered_feature_bc_matrix/barcodes.tsv.gz"
counts_fp= "/Users/4472525/Dropbox (Moffitt Cancer Center)/SPATIAL_TRANSCRIPTOMICS/visium_data_InnaSmalley/smalley_raw_visium_data/smalley_visium_second_run/smalley_visium_combined1_2_runs_sprangercount/sample12_LMM_B4_ManualAlignmt/sample12_LMM_B4_ManualAlignmt/outs/filtered_feature_bc_matrix/matrix.mtx.gz"
coords_fp="/Users/4472525/Dropbox (Moffitt Cancer Center)/SPATIAL_TRANSCRIPTOMICS/visium_data_InnaSmalley/smalley_raw_visium_data/smalley_visium_second_run/smalley_visium_combined1_2_runs_sprangercount/sample12_LMM_B4_ManualAlignmt/sample12_LMM_B4_ManualAlignmt/outs/spatial/tissue_positions_list.csv"
filterMT=F
savefiles=F
stlist=F
#read in feature data
features_df = data.table::fread(features_fp, header = F, check.names =F) %>%
dplyr::rename("emsb" = 1,
"gene" = 2,
"dtype" = 3) %>%
dplyr::mutate(feat_n = as.character(seq(nrow(.)))) %>%
dplyr::relocate(feat_n, .before = 1)
#read in barcode data
barcodes_df = data.table::fread(barcodes_fp, header = F, check.names = F) %>%
dplyr::mutate(spot_n = as.character(seq(nrow(.)))) %>%
dplyr::relocate(spot_n, .before = 1) %>%
dplyr::rename("barcode" = 2)
#read in coordinate data
coords_df = data.table::fread(coords_fp, header=F, check.names=F) %>%
dplyr::rename('barcode' = 1, 'intissue' = 2, 'array_row' = 3,
'array_col' = 4, 'pxlcol' = 5, 'pxlrow' = 6) %>%
dplyr::mutate(spotname = paste0("y", array_row, "x", array_col))
#read in count data
counts_df = data.table::fread(counts_fp, header=F, check.names = F, sep=" ", skip = 3) %>%
dplyr::rename("feat_n" = 1, "spot_n" = 2, "counts" = 3)
counts_df
#merge files together
counts_all_df = dplyr::inner_join(coords_df, barcodes_df, by='barcode')
counts_all_df <- dplyr::inner_join(counts_all_df %>% dplyr::mutate(spot_n = as.integer(spot_n)), counts_df, by='spot_n')
counts_all_df <- dplyr::inner_join(counts_all_df, features_df %>% dplyr::mutate(feat_n = as.integer(feat_n)), by='feat_n')
counts_all_df = counts_all_df %>%
dplyr::mutate(spot_n = ifelse(is.na(spot_n), "otherBCs", spot_n),
spotname = ifelse(is.na(spotname), "otherBCs", spotname),
emsb = ifelse(is.na(emsb), "noGene_", emsb),
counts = ifelse(is.na(counts), 0, counts)) %>%
data.table::as.data.table()
rawcounts_df = data.table::dcast.data.table(counts_all_df, emsb + gene ~ spotname, value.var = "counts", fill = 0) %>%
dplyr::filter(emsb != "noGene_") %>%
dplyr::select(-contains("otherBCs")) %>%
data.frame(check.names = F)
?data.table::dcast.data.table
counts_all_df
features_df
unique(features_df$emsb)
length(unique(features_df$emsb))
counts_all_df
length(unique(counts_all_df$emsb))
length(unique(features_df$emsb))
length(unique(counts_all_df$emsb))
features_fp
features_fp= "/Volumes/lab_fridley/spatial_transcriptomics/data/raw_visium_datasets/Human_Prostate_Cancer_Adenocarcinoma_Invasive_Carcinoma_FFPE/filtered_feature_bc_matrix/features.tsv.gz"
barcodes_fp= "/Volumes/lab_fridley/spatial_transcriptomics/data/raw_visium_datasets/Human_Prostate_Cancer_Adenocarcinoma_Invasive_Carcinoma_FFPE/filtered_feature_bc_matrix/barcodes.tsv.gz"
counts_fp= "/Volumes/lab_fridley/spatial_transcriptomics/data/raw_visium_datasets/Human_Prostate_Cancer_Adenocarcinoma_Invasive_Carcinoma_FFPE/filtered_feature_bc_matrix/matrix.mtx.gz"
coords_fp="/Volumes/lab_fridley/spatial_transcriptomics/data/raw_visium_datasets/Human_Prostate_Cancer_Adenocarcinoma_Invasive_Carcinoma_FFPE/spatial/tissue_positions_list.csv"
filterMT=F
savefiles=F
stlist=F
#read in feature data
features_df = data.table::fread(features_fp, header = F, check.names =F) %>%
dplyr::rename("emsb" = 1,
"gene" = 2,
"dtype" = 3) %>%
dplyr::mutate(feat_n = as.character(seq(nrow(.)))) %>%
dplyr::relocate(feat_n, .before = 1)
#read in barcode data
barcodes_df = data.table::fread(barcodes_fp, header = F, check.names = F) %>%
dplyr::mutate(spot_n = as.character(seq(nrow(.)))) %>%
dplyr::relocate(spot_n, .before = 1) %>%
dplyr::rename("barcode" = 2)
#read in coordinate data
coords_df = data.table::fread(coords_fp, header=F, check.names=F) %>%
dplyr::rename('barcode' = 1, 'intissue' = 2, 'array_row' = 3,
'array_col' = 4, 'pxlcol' = 5, 'pxlrow' = 6) %>%
dplyr::mutate(spotname = paste0("y", array_row, "x", array_col))
features_fp= "/Volumes/lab_fridley/spatial_transcriptomics/data/raw_visium_datasets/Human_Prostate_Cancer_Adenocarcinoma_Invasive_Carcinoma_FFPE/raw_feature_bc_matrix/features.tsv.gz"
barcodes_fp= "/Volumes/lab_fridley/spatial_transcriptomics/data/raw_visium_datasets/Human_Prostate_Cancer_Adenocarcinoma_Invasive_Carcinoma_FFPE/raw_feature_bc_matrix/barcodes.tsv.gz"
counts_fp= "/Volumes/lab_fridley/spatial_transcriptomics/data/raw_visium_datasets/Human_Prostate_Cancer_Adenocarcinoma_Invasive_Carcinoma_FFPE/raw_feature_bc_matrix/matrix.mtx.gz"
coords_fp="/Volumes/lab_fridley/spatial_transcriptomics/data/raw_visium_datasets/Human_Prostate_Cancer_Adenocarcinoma_Invasive_Carcinoma_FFPE/spatial/tissue_positions_list.csv"
filterMT=F
savefiles=F
stlist=F
#read in feature data
features_df = data.table::fread(features_fp, header = F, check.names =F) %>%
dplyr::rename("emsb" = 1,
"gene" = 2,
"dtype" = 3) %>%
dplyr::mutate(feat_n = as.character(seq(nrow(.)))) %>%
dplyr::relocate(feat_n, .before = 1)
#read in barcode data
barcodes_df = data.table::fread(barcodes_fp, header = F, check.names = F) %>%
dplyr::mutate(spot_n = as.character(seq(nrow(.)))) %>%
dplyr::relocate(spot_n, .before = 1) %>%
dplyr::rename("barcode" = 2)
devtools::load_all()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
if("devtools" %in% rownames(installed.packages()) == FALSE) {
install.packages("devtools")
}
# devtools::install_github("fridleylab/spatialGE")
library('spatialGE')
dcc_files =  "~/Desktop/geomx_input/Kidney_Dataset/dccs"
pkc = '~/Desktop/geomx_input/Kidney_Dataset/pkcs/TAP_H_WTA_v1.0.pkc'
sample_annots = "~/Desktop/geomx_input/Kidney_Sample_Annotations.txt"
slide_col="SlideName"
id_col="Sample_ID"
x_col="ROICoordinateX"
y_col="ROICoordinateY"
meta_cols=c('disease_status',	'pathology', 'region')
kdgeomx <- STList(rnacounts=dcc_files, gmx_pkc=pkc, samples=sample_annots,
gmx_slide_col=slide_col,
gmx_roi_col=id_col,
gmx_x_col=x_col,
gmx_y_col=y_col,
gmx_meta_cols=meta_cols)
kdgeomx
images = '~/Desktop/geomx_input/images/'
kdgeomx = load_images(kdgeomx, images)
kdgeomx <- spatialTransform(kdgeomx)
x=kdgeomx
method='log'
scale_f=10000
# Detect transformation method
if(method == 'voom'){
x@tr_counts = voom_norm(x)
x@misc[['transform']] = 'voom'
} else if(method == 'log'){
x@tr_counts = log_transf(x, scale_f=scale_f)
x@misc[['transform']] = 'log'
}
View(x)
x@tr_counts[["disease3"]]
kdgeomx <- filter_data(kdgeomx, spot_minreads=1)
kdgeomx <- filter_data(kdgeomx, spot_minreads=0)
rm(x)
kdgeomx <- filter_data(kdgeomx, spot_minreads=0)
kdgeomx <- filter_data(kdgeomx, spot_minreads=1)
View(kdgeomx)
?filter_data
View(kdgeomx)
kdgeomx <- filter_data(kdgeomx, spot_minreads=100)
devtools::load_all()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
if("devtools" %in% rownames(installed.packages()) == FALSE) {
install.packages("devtools")
}
# devtools::install_github("fridleylab/spatialGE")
library('spatialGE')
dcc_files =  "~/Desktop/geomx_input/Kidney_Dataset/dccs"
pkc = '~/Desktop/geomx_input/Kidney_Dataset/pkcs/TAP_H_WTA_v1.0.pkc'
sample_annots = "~/Desktop/geomx_input/Kidney_Sample_Annotations.txt"
slide_col="SlideName"
id_col="Sample_ID"
x_col="ROICoordinateX"
y_col="ROICoordinateY"
meta_cols=c('disease_status',	'pathology', 'region')
kdgeomx <- STList(rnacounts=dcc_files, gmx_pkc=pkc, samples=sample_annots,
gmx_slide_col=slide_col,
gmx_roi_col=id_col,
gmx_x_col=x_col,
gmx_y_col=y_col,
gmx_meta_cols=meta_cols)
rnacounts=dcc_files
gmx_pkc=pkc
samples=sample_annots
gmx_slide_col=slide_col
gmx_roi_col=id_col
gmx_x_col=x_col
gmx_y_col=y_col
gmx_meta_cols=meta_cols
spotcoords=NULL
# Check input type.
input_check = detect_input(rnacounts=rnacounts, spotcoords=spotcoords, samples=samples)
input_check
# Output error if input_check is empty (likely input format not recognized).
if(rlang::is_empty(input_check)){
stop('Input not recognized. Please refer to documentation.')
}
# CASE: NAMED LIST OF DATAFRAMES WITH COUNTS AND NAMED LIST OF DATA FRAMES WITH COORDINATES.
# METADATA INFO OPTIONAL.
if(!is.null(input_check$rna)){
if(input_check$rna[1] == 'list_dfs' && input_check$coords[1] == 'list_dfs'){
cat(crayon::yellow(paste("Found List of Dataframes...\n")))
pre_lists = read_list_dfs(rnacounts, spotcoords)
}
}
# CASE: SEURAT OBJECT
if(!is.null(input_check$rna)){
if(input_check$rna[1] == 'seurat'){
cat(crayon::yellow(paste("Found Seurat object.\n")))
pre_lists = read_seurat(rnacounts)
img_obj = pre_lists[['images']]
platform = 'visium'
}
}
# CASE: GEOMX INPUT
if(!is.null(input_check$rna)){
if(input_check$rna[1] == 'geomx_dcc'){
cat(crayon::yellow(paste("Found GeoMx DCC output.\n")))
pre_lists = import_Geomx(dcc=rnacounts, pkc=gmx_pkc, annots=samples, slide_col=gmx_slide_col, id_col=gmx_roi_col, x_col=gmx_x_col, y_col=gmx_y_col)
platform = 'geomx'
}
}
View(pre_lists)
View(pre_lists)
pre_lists[["counts"]][["disease3"]]''
pre_lists[["counts"]][["disease3"]]
cat(crayon::yellow(paste("Requested", length(pre_lists[['counts']]), "Samples\n")))
# Process count and coordinate lists before placing within STList
cat(crayon::yellow(paste("Cleaning Count and Coordinate Data Gene Names.\n")))
i=1
# Get loop current name to be processed.
name_i = names(counts_df_list)[i]
counts_df_list=counts_df_list[['counts']]
counts_df_list=pre_lists[['counts']]
coords_df_list=pre_lists[['coords']]
# Get loop current name to be processed.
name_i = names(counts_df_list)[i]
name_i
# Column names of the count data are simplified using the clean_names() function.
# NOTE: May need to reconsider use later.
counts_df_list[[name_i]] = janitor::clean_names(counts_df_list[[name_i]])
# Clean sample names in coordinates data using the clean_names(), so that they
# mirror the column names in the count data frame.
# NOTE: May need to reconsider use later.
coords_df_list[[name_i]][, 1] = janitor::make_clean_names(unlist(coords_df_list[[name_i]][, 1]))
# Test that spot names are the same in both count and coordinate data frames.
if(length(setdiff(colnames(counts_df_list[[name_i]])[-1], unlist(coords_df_list[[name_i]][, 1]))) != 0){
stop(paste0('The spots in the count  data (columns) and coordinate data (rows) do not match in spatial array (\"', name_i, '\").'))
}
array_col = names(coords_df_list[[name_i]])[3]
# Sort coordinate data according to third column in the coordinate data frame.
coords_df_list[[name_i]] = coords_df_list[[name_i]] %>%
dplyr::arrange(array_col)#[order(coords_df_list[[name_i]][, 3]), ]
View(counts_df_list)
# Order column names in count data frame according to sorted coordinate data.
counts_df_list[[name_i]] = counts_df_list[[name_i]][, c(colnames(counts_df_list[[name_i]][1]), unlist(coords_df_list[[name_i]][, 1]))]
# Put column names to coordinate data.
colnames(coords_df_list[[name_i]] ) = c('libname', 'ypos', 'xpos')
# Check for zero-count spots and filter
zerocount_spots = colSums(counts_df_list[[name_i]][, -1]) == 0
zerocount_spots
# Check for zero-count spots and filter
zerocount_spots = colSums(counts_df_list[[name_i]][, -1], na.rm = T) == 0
zerocount_spots
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
if("devtools" %in% rownames(installed.packages()) == FALSE) {
install.packages("devtools")
}
# devtools::install_github("fridleylab/spatialGE")
library('spatialGE')
dcc_files =  "~/Desktop/geomx_input/Kidney_Dataset/dccs"
pkc = '~/Desktop/geomx_input/Kidney_Dataset/pkcs/TAP_H_WTA_v1.0.pkc'
sample_annots = "~/Desktop/geomx_input/Kidney_Sample_Annotations.txt"
slide_col="SlideName"
id_col="Sample_ID"
x_col="ROICoordinateX"
y_col="ROICoordinateY"
meta_cols=c('disease_status',	'pathology', 'region')
kdgeomx <- STList(rnacounts=dcc_files, gmx_pkc=pkc, samples=sample_annots,
gmx_slide_col=slide_col,
gmx_roi_col=id_col,
gmx_x_col=x_col,
gmx_y_col=y_col,
gmx_meta_cols=meta_cols)
devtools::load_all()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
if("devtools" %in% rownames(installed.packages()) == FALSE) {
install.packages("devtools")
}
# devtools::install_github("fridleylab/spatialGE")
library('spatialGE')
dcc_files =  "~/Desktop/geomx_input/Kidney_Dataset/dccs"
pkc = '~/Desktop/geomx_input/Kidney_Dataset/pkcs/TAP_H_WTA_v1.0.pkc'
sample_annots = "~/Desktop/geomx_input/Kidney_Sample_Annotations.txt"
slide_col="SlideName"
id_col="Sample_ID"
x_col="ROICoordinateX"
y_col="ROICoordinateY"
meta_cols=c('disease_status',	'pathology', 'region')
kdgeomx <- STList(rnacounts=dcc_files, gmx_pkc=pkc, samples=sample_annots,
gmx_slide_col=slide_col,
gmx_roi_col=id_col,
gmx_x_col=x_col,
gmx_y_col=y_col,
gmx_meta_cols=meta_cols)
devtools::load_all()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
if("devtools" %in% rownames(installed.packages()) == FALSE) {
install.packages("devtools")
}
# devtools::install_github("fridleylab/spatialGE")
library('spatialGE')
dcc_files =  "~/Desktop/geomx_input/Kidney_Dataset/dccs"
pkc = '~/Desktop/geomx_input/Kidney_Dataset/pkcs/TAP_H_WTA_v1.0.pkc'
sample_annots = "~/Desktop/geomx_input/Kidney_Sample_Annotations.txt"
slide_col="SlideName"
id_col="Sample_ID"
x_col="ROICoordinateX"
y_col="ROICoordinateY"
meta_cols=c('disease_status',	'pathology', 'region')
kdgeomx <- STList(rnacounts=dcc_files, gmx_pkc=pkc, samples=sample_annots,
gmx_slide_col=slide_col,
gmx_roi_col=id_col,
gmx_x_col=x_col,
gmx_y_col=y_col,
gmx_meta_cols=meta_cols)
kdgeomx
images = '~/Desktop/geomx_input/images/'
kdgeomx = load_images(kdgeomx, images)
View(kdgeomx)
kdgeomx <- spatialTransform(kdgeomx)
View(kdgeomx)
qplot <- plot_gene_quilt(kdgeomx, image=T, genes='TXNIP', visium=F)
ggpubr::ggarrange(plotlist=qplot, ncol=2, nrow=7)
ggpubr::ggarrange(plotlist=qplot, ncol=2, nrow=7)
ggpubr::ggarrange(plotlist=qplot, ncol=2, nrow=7)
ggpubr::ggarrange(plotlist=qplot, ncol=2, nrow=7)
qplot <- plot_gene_quilt(kdgeomx, image=T, genes='TXNIP', visium=F, color_pal='sunset')
ggpubr::ggarrange(plotlist=qplot, ncol=2, nrow=7)
devtools::check()
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
