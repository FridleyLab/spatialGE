}else{
samplevar <- 'sample_id'
clinvar_vals <- 1:length(x@counts)
clinvar_vals <- tibble::as_tibble_col(clinvar_vals, column_name='sample_id')
plot_labs <- as.character(1:length(x@tr_counts))
clinvar_vals <- clinvar_vals %>%
tibble::add_column(., samples=plot_labs)
}
melanoma@spstats_plots
melanoma@clinical
rmmelanoma
rm(melanoma)
x=readRDS('~/Dropbox (Moffitt Cancer Center)/SPATIAL_TRANSCRIPTOMICS/visium_data_InnaSmalley/clinical_spatial_analysis/data/smalley_melanoma_STList_clinicalplots.RDS')
x@clinical
sample_var='treatment_history'
# Extract clinical data from specified variable. If none specified, use the
# array IDs from the first column of clinical data.
if(!is.null(samplevar)){
clinvar_vals <- x@clinical[[samplevar]]
clinvar_vals <- tibble::as_tibble_col(clinvar_vals, column_name=samplevar)
plot_labs <- as.character(x@clinical[[1]])
clinvar_vals <- clinvar_vals %>%
tibble::add_column(., samples=plot_labs)
}else{
samplevar <- 'sample_id'
clinvar_vals <- 1:length(x@counts)
clinvar_vals <- tibble::as_tibble_col(clinvar_vals, column_name='sample_id')
plot_labs <- as.character(1:length(x@tr_counts))
clinvar_vals <- clinvar_vals %>%
tibble::add_column(., samples=plot_labs)
}
samplevar=sample_var
rm(sample_var)
# Extract clinical data from specified variable. If none specified, use the
# array IDs from the first column of clinical data.
if(!is.null(samplevar)){
clinvar_vals <- x@clinical[[samplevar]]
clinvar_vals <- tibble::as_tibble_col(clinvar_vals, column_name=samplevar)
plot_labs <- as.character(x@clinical[[1]])
clinvar_vals <- clinvar_vals %>%
tibble::add_column(., samples=plot_labs)
}else{
samplevar <- 'sample_id'
clinvar_vals <- 1:length(x@counts)
clinvar_vals <- tibble::as_tibble_col(clinvar_vals, column_name='sample_id')
plot_labs <- as.character(1:length(x@tr_counts))
clinvar_vals <- clinvar_vals %>%
tibble::add_column(., samples=plot_labs)
}
clinvar_vals
clinvar_vals$moran <- rep(NA, length(x@tr_counts))
clinvar_vals$geary <- rep(NA, length(x@tr_counts))
clinvar_vals$getis <- rep(NA, length(x@tr_counts))
clinvar_vals
# Spatial plots with cell scores might get removed from package
cell=NULL
# Test if an STList has been input.
if(is.null(x) | !is(x, 'STList')){
stop("The input must be a STList.")
}
if(!is.null(gene) && length(gene) != 1){
stop('At the moment, only one gene at a time is enabled.')
}
if(!is.null(cell) && length(cell) != 1){
stop('At the moment, only one cell type at a time is enabled.')
}
if(!is.null(gene) && !is.null(cell)){
stop('At the moment, only one gene OR one cell type at a time is enabled.')
}
# Extract clinical data from specified variable. If none specified, use the
# array IDs from the first column of clinical data.
if(!is.null(var)){
clinvar_vals <- x@clinical[[var]]
clinvar_vals <- tibble::as_tibble_col(clinvar_vals, column_name=var)
plot_labs <- as.character(x@clinical[[1]])
clinvar_vals <- clinvar_vals %>%
tibble::add_column(., samples=plot_labs)
}else{
var <- 'sample_id'
clinvar_vals <- 1:length(x@counts)
clinvar_vals <- tibble::as_tibble_col(clinvar_vals, column_name='sample_id')
plot_labs <- as.character(1:length(x@tr_counts))
clinvar_vals <- clinvar_vals %>%
tibble::add_column(., samples=plot_labs)
}
var=samplevar
rm(samplevar)
# Extract clinical data from specified variable. If none specified, use the
# array IDs from the first column of clinical data.
if(!is.null(var)){
clinvar_vals <- x@clinical[[var]]
clinvar_vals <- tibble::as_tibble_col(clinvar_vals, column_name=var)
plot_labs <- as.character(x@clinical[[1]])
clinvar_vals <- clinvar_vals %>%
tibble::add_column(., samples=plot_labs)
}else{
var <- 'sample_id'
clinvar_vals <- 1:length(x@counts)
clinvar_vals <- tibble::as_tibble_col(clinvar_vals, column_name='sample_id')
plot_labs <- as.character(1:length(x@tr_counts))
clinvar_vals <- clinvar_vals %>%
tibble::add_column(., samples=plot_labs)
}
clinvar_vals
clinvar_vals$moran <- rep(NA, length(x@tr_counts))
clinvar_vals$geary <- rep(NA, length(x@tr_counts))
clinvar_vals$getis <- rep(NA, length(x@tr_counts))
x = gene_moran_I(x, genes=gene, who=c(1:length(x@tr_counts)))
x=readRDS('~/Dropbox (Moffitt Cancer Center)/SPATIAL_TRANSCRIPTOMICS/visium_data_InnaSmalley/clinical_spatial_analysis/data/smalley_melanoma_STList_clinicalplots.RDS')
genes=c('MS4A1', 'MYC')
x@pheno_plots
who=1:16
# Test if no specific subject plot was requested.
if (is.null(who)) {
who = c(1:length(x@tr_counts))
}
# Generate combination of sample x gene to for.
combo = tibble::tibble()
for(i in who){
subsetgenes_mask = genes %in% x@tr_counts[[i]]$gene
subsetgenes = genes[subsetgenes_mask]
combo = dplyr::bind_rows(combo, expand.grid(names(x@tr_counts[i]), subsetgenes))
# Get genes not present.
notgenes = genes[!subsetgenes_mask]
if(!rlang::is_empty(notgenes)){
cat(paste0(paste(notgenes, collapse=', '), ": Not present in the transformed counts for sample ", names(x@tr_counts[i]), ".\n"))
}
}
genes=c('MLANA', 'MYC')
# Test if no specific subject plot was requested.
if (is.null(who)) {
who = c(1:length(x@tr_counts))
}
# Generate combination of sample x gene to for.
combo = tibble::tibble()
for(i in who){
subsetgenes_mask = genes %in% x@tr_counts[[i]]$gene
subsetgenes = genes[subsetgenes_mask]
combo = dplyr::bind_rows(combo, expand.grid(names(x@tr_counts[i]), subsetgenes))
# Get genes not present.
notgenes = genes[!subsetgenes_mask]
if(!rlang::is_empty(notgenes)){
cat(paste0(paste(notgenes, collapse=', '), ": Not present in the transformed counts for sample ", names(x@tr_counts[i]), ".\n"))
}
}
combo
# Test if list with kriging exists for each gene. If not create it.
for(gene in genes){
if(is.null(x@gene_het[[gene]]) && rlang::is_empty(x@gene_het[[gene]])){
x@gene_het[[gene]] = list()
for(i in 1:length(x@tr_counts)){
x@gene_het[[gene]][[names(x@tr_counts[i])]] = list(morans_I=NULL,
gearys_C=NULL,
getis_ord_Gi=NULL)
}
}
}
# Define cores available
cores = count_cores(nrow(combo))
cores
i_combo=2
i = as.vector(unlist(combo[i_combo, 1]))
j = as.vector(unlist(combo[i_combo, 2]))
# Create distance matrix based on the coordinates of each sampled location.
subj_dists = as.matrix(dist(x@coords[[i]][2:3]))
subj_dists[subj_dists == 0] = 0.0001
subj_dists_inv = 1/subj_dists
diag(subj_dists_inv) = 0
# Extract expression data (voom counts) for a given gene.
gene_expr = unlist(x@tr_counts[[i]][x@tr_counts[[i]][[1]] == j, -1])
# Estimate statistic.
stat_est = spdep::globalG.test(gene_expr, spdep::mat2listw(subj_dists_inv, style='B'))
start_time <- Sys.time()
# Estimate statistic.
stat_est = spdep::globalG.test(gene_expr, spdep::mat2listw(subj_dists_inv, style='B'))
end_time <- Sys.time()
end_time - start_time
start_time = Sys.time()
# Estimate statistic.
stat_est = spdep::moran.test(gene_expr, spdep::mat2listw(subj_dists_inv))
end_time <- Sys.time()
end_time - start_time
# Estimate statistic.
#stat_est = spdep::moran.test(gene_expr, spdep::mat2listw(subj_dists_inv))
stat_est = spdep::moran(gene_expr, spdep::mat2listw(subj_dists_inv))
length(gene_expr)
length(spdep::mat2listw(subj_dists_inv))
test = spdep::mat2listw(subj_dists_inv)
# Estimate statistic.
#stat_est = spdep::moran.test(gene_expr, spdep::mat2listw(subj_dists_inv))
stat_est = spdep::moran(gene_expr, test)
# Estimate statistic.
stat_est = spdep::moran.test(gene_expr, test)
start_time = Sys.time()
# Estimate statistic.
stat_est = spdep::moran.test(gene_expr, test)
#stat_est = spdep::moran(gene_expr, test)
end_time <- Sys.time()
end_time - start_time
test = spdep::mat2listw(subj_dists_inv)
start_time = Sys.time()
# Estimate statistic.
#stat_est = spdep::moran.test(gene_expr, test)
spdep::mat2listw(subj_dists_inv)
end_time <- Sys.time()
end_time - start_time
start_time = Sys.time()
# Estimate statistic.
#stat_est = spdep::moran.test(gene_expr, test)
test=spdep::mat2listw(subj_dists_inv)
end_time <- Sys.time()
end_time - start_time
length(test$neighbours)
length(gene_expr)
View(test)
??mat2listw
# Define cores available
cores = count_cores(length(x@coords))
cores
x@misc$platform
x@misc$transform
x@misc$STclust_cuttype
x@misc$sp_images
is.null(x@misc$listws)
devtools::load_all('~/Dropbox (Moffitt Cancer Center)/SPATIAL_TRANSCRIPTOMICS/spatialGE')
View(create_listw())
View(create_listw
)
melanoma=readRDS('~/Dropbox (Moffitt Cancer Center)/SPATIAL_TRANSCRIPTOMICS/visium_data_InnaSmalley/clinical_spatial_analysis/data/smalley_melanoma_STList_clinicalplots.RDS')
devtools::load_all('~/Dropbox (Moffitt Cancer Center)/SPATIAL_TRANSCRIPTOMICS/spatialGE')
melanoma@clinical
melanoma = spatial_stat_plot(melanoma, gene='MYC', var = 'treatment_history')
devtools::load_all('~/Dropbox (Moffitt Cancer Center)/SPATIAL_TRANSCRIPTOMICS/spatialGE/')
melanoma=readRDS('~/Dropbox (Moffitt Cancer Center)/SPATIAL_TRANSCRIPTOMICS/visium_data_InnaSmalley/clinical_spatial_analysis/data/smalley_melanoma_STList_clinicalplots.RDS')
melanoma = spatial_stat_plot(melanoma, var = 'treatment_history')
View(melanoma)
devtools::load_all('~/Dropbox (Moffitt Cancer Center)/SPATIAL_TRANSCRIPTOMICS/spatialGE/')
melanoma = spatial_stat_plot(melanoma, var = 'treatment_history')
melanoma = spatial_stat_plot(melanoma, var = 'treatment_history', gene='MYC')
x=melanoma
stop('Please, enter a gene to generate plot.')
var = 'treatment_history'
gene='MYC'
gene=NULL,
gene=NULL
color_pal="muted"
gene='MYC'
# Spatial plots with cell scores might get removed from package
cell=NULL
# Test if an STList has been input.
if(is.null(x) | !is(x, 'STList')){
stop("The input must be a STList.")
}
if(!is.null(gene) && length(gene) != 1){
stop('At the moment, only one gene at a time is enabled.')
}
if(!is.null(cell) && length(cell) != 1){
stop('At the moment, only one cell type at a time is enabled.')
}
if(!is.null(gene) && !is.null(cell)){
stop('At the moment, only one gene OR one cell type at a time is enabled.')
}
if(is.null(gene) && is.null(cell)){
stop('Please, enter a gene to generate plot.')
}
# Extract clinical data from specified variable. If none specified, use the
# array IDs from the first column of clinical data.
if(!is.null(var)){
clinvar_vals <- x@clinical[[var]]
clinvar_vals <- tibble::as_tibble_col(clinvar_vals, column_name=var)
plot_labs <- as.character(x@clinical[[1]])
clinvar_vals <- clinvar_vals %>%
tibble::add_column(., samples=plot_labs)
}else{
var <- 'sample_id'
clinvar_vals <- 1:length(x@counts)
clinvar_vals <- tibble::as_tibble_col(clinvar_vals, column_name='sample_id')
plot_labs <- as.character(1:length(x@tr_counts))
clinvar_vals <- clinvar_vals %>%
tibble::add_column(., samples=plot_labs)
}
clinvar_vals$moran <- rep(NA, length(x@tr_counts))
clinvar_vals$geary <- rep(NA, length(x@tr_counts))
clinvar_vals$getis <- rep(NA, length(x@tr_counts))
clinvar_vals
x = gene_moran_I(x, genes=gene, who=c(1:length(x@tr_counts)))
# Test if no specific subject plot was requested.
if (is.null(who)) {
who = c(1:length(x@tr_counts))
}
who=c(1:length(x@tr_counts))
# Test if no specific subject plot was requested.
if (is.null(who)) {
who = c(1:length(x@tr_counts))
}
# Generate combination of sample x gene to for.
combo = tibble::tibble()
for(i in who){
subsetgenes_mask = genes %in% x@tr_counts[[i]]$gene
subsetgenes = genes[subsetgenes_mask]
combo = dplyr::bind_rows(combo, expand.grid(names(x@tr_counts[i]), subsetgenes))
# Get genes not present.
notgenes = genes[!subsetgenes_mask]
if(!rlang::is_empty(notgenes)){
cat(paste0(paste(notgenes, collapse=', '), ": Not present in the transformed counts for sample ", names(x@tr_counts[i]), ".\n"))
}
}
genes
gene
genes=gene
# Generate combination of sample x gene to for.
combo = tibble::tibble()
for(i in who){
subsetgenes_mask = genes %in% x@tr_counts[[i]]$gene
subsetgenes = genes[subsetgenes_mask]
combo = dplyr::bind_rows(combo, expand.grid(names(x@tr_counts[i]), subsetgenes))
# Get genes not present.
notgenes = genes[!subsetgenes_mask]
if(!rlang::is_empty(notgenes)){
cat(paste0(paste(notgenes, collapse=', '), ": Not present in the transformed counts for sample ", names(x@tr_counts[i]), ".\n"))
}
}
combo
# Test if list with kriging exists for each gene. If not create it.
for(gene in genes){
if(is.null(x@gene_het[[gene]]) && rlang::is_empty(x@gene_het[[gene]])){
x@gene_het[[gene]] = list()
for(i in 1:length(x@tr_counts)){
x@gene_het[[gene]][[names(x@tr_counts[i])]] = list(morans_I=NULL,
gearys_C=NULL,
getis_ord_Gi=NULL)
}
}
}
# Check whether or not a list of weights have been created
if(is.null(x@misc$listws)){
x@misc$listws = create_listw(x)
}
# Define cores available
cores = count_cores(length(x@coords))
cores
# Create distance matrix based on the coordinates of each sampled location.
listw_list = parallel::mclapply(seq_along(1:length(x@coords)), function(i){
subj_dists = as.matrix(dist(x@coords[[i]][2:3]))
subj_dists[subj_dists == 0] = 0.0001
subj_dists_inv = 1/subj_dists
diag(subj_dists_inv) = 0
subj_dists_inv=spdep::mat2listw(subj_dists_inv, style='B')
return(subj_dists_inv)
})
# Create distance matrix based on the coordinates of each sampled location.
listw_list = parallel::mclapply(seq_along(1:length(x@coords)), function(i){
subj_dists = as.matrix(dist(x@coords[[i]][2:3]))
subj_dists[subj_dists == 0] = 0.0001
subj_dists_inv = 1/subj_dists
diag(subj_dists_inv) = 0
subj_dists_inv=spdep::mat2listw(subj_dists_inv, style='B')
return(subj_dists_inv)
}, mc.cores=cores, mc.preschedule=F)
i
subj_dists = as.matrix(dist(x@coords[[i]][2:3]))
subj_dists[subj_dists == 0] = 0.0001
subj_dists_inv = 1/subj_dists
diag(subj_dists_inv) = 0
subj_dists_inv=spdep::mat2listw(subj_dists_inv, style='B')
x=readRDS('~/Dropbox (Moffitt Cancer Center)/SPATIAL_TRANSCRIPTOMICS/spatialGE/')
x=readRDS('~/Dropbox (Moffitt Cancer Center)/SPATIAL_TRANSCRIPTOMICS/visium_data_InnaSmalley/clinical_spatial_analysis/data/smalley_melanoma_STList_clinicalplots.RDS')
melanoma=x
rm(x)
devtools::load_all('~/Dropbox (Moffitt Cancer Center)/SPATIAL_TRANSCRIPTOMICS/spatialGE/')
melanoma=spatial_stat_plot(melanoma, var = 'treatment_history', gene='MYC')
devtools::load_all('./')
data_files <- system.file("extdata", package="spatialGE")
data_files
count_files <- list.files(data_files, full.names=T, pattern='counts')
coord_files <- list.files(data_files, full.names=T, pattern='mapping')
clin_file <- list.files(data_files, full.names=T, pattern='clinical')
count_files
coord_files
melanoma <- STList(rnacounts=count_files, spotcoords=coord_files, samples=clin_file)
View(melanoma)
melanoma
bulk_pca(melanoma, clinvar='gender')
devtools::load_all('./')
data_files <- system.file("extdata", package="spatialGE")
count_files <- list.files(data_files, full.names=T, pattern='counts')
coord_files <- list.files(data_files, full.names=T, pattern='mapping')
clin_file <- list.files(data_files, full.names=T, pattern='clinical')
melanoma <- STList(rnacounts=count_files, spotcoords=coord_files, samples=clin_file)
melanoma
bulk_pca(melanoma, clinvar='gender')
melanoma <- spatialTransform(melanoma)
gc()
quilts1 <- plot_gene_quilt(melanoma, genes=c('CD19', 'MLANA'), plot_who=2, visium=F,
color_pal='BuRd', ptsize=2)
ggpubr::ggarrange(plotlist=quilts1, nrow=1, ncol=2, legend='bottom')
quilts1 <- plot_gene_quilt(melanoma, genes=c('MS4A1', 'MLANA'), plot_who=2, visium=F,
color_pal='BuRd', ptsize=2)
ggpubr::ggarrange(plotlist=quilts1, nrow=1, ncol=2, legend='bottom')
quilts1 <- plot_gene_quilt(melanoma, genes=c('MS4A1', 'MLANA'), plot_who=2, visium=F,
color_pal='BuRd', ptsize=2)
ggpubr::ggarrange(plotlist=quilts1, nrow=1, ncol=2, legend='bottom')
melanoma <- gene_krige(melanoma, genes=c('CD19', 'MLANA'), who=c(2, 3), python=F, res=0.2)
melanoma <- gene_krige(melanoma, genes=c('MS4A1', 'MLANA'), who=c(2, 3), python=F, res=0.2)
kriges1 <- plot_gene_krige(melanoma, genes=c('MS4A1', 'MLANA'), plot_who=2, visium=F)
ggpubr::ggarrange(plotlist=kriges1, nrow=1, ncol=2, legend='bottom')
kriges2 <- plot_gene_krige(melanoma, genes=c('CD19', 'MLANA'), plot_who=3, visium=F)
ggpubr::ggarrange(plotlist=kriges2, nrow=1, ncol=2, common.legend=T, legend='bottom')
kriges2 <- plot_gene_krige(melanoma, genes=c('MS4A1', 'MLANA'), plot_who=3, visium=F)
ggpubr::ggarrange(plotlist=kriges2, nrow=1, ncol=2, common.legend=T, legend='bottom')
melanoma <- spatialDeconv(melanoma, method='xcell')
quilts2 <- plot_deconv_quilt(melanoma, cells='b_cells', plot_who=2, purity=T,
color_pal='BuRd', visium=F)
ggpubr::ggarrange(plotlist=quilts2, nrow=1, ncol=2, legend='bottom')
quilts2 <- plot_deconv_quilt(melanoma, cells='b_cells', plot_who=2, purity=T,
color_pal='BuRd', visium=F, ptsize=2)
ggpubr::ggarrange(plotlist=quilts2, nrow=1, ncol=2, legend='bottom')
quilts2 <- plot_deconv_quilt(melanoma, cells='b_cells', plot_who=2, purity=T,
color_pal='BuRd', visium=F, ptsize=1.5)
ggpubr::ggarrange(plotlist=quilts2, nrow=1, ncol=2, legend='bottom')
quilts2 <- plot_deconv_quilt(melanoma, cells='b_cells', plot_who=2, purity=T,
color_pal='BuRd', visium=F, ptsize=1)
ggpubr::ggarrange(plotlist=quilts2, nrow=1, ncol=2, legend='bottom')
quilts3 <- plot_gene_quilt(melanoma, genes='MS4A1', plot_who=2, purity=T, visium=F, inter=T)
quilts3[[1]]
melanoma <- deconv_krige(melanoma, cells='b_cells', who=2, python=F, res=0.2)
kriges3 <- plot_deconv_krige(melanoma,  cells='b_cells', plot_who=2, visium=F)
ggpubr::ggarrange(plotlist=kriges3, nrow=1, ncol=1, legend='bottom')
kriges4 <- plot_deconv_krige(melanoma,  cells='b_cells', plot_who=2, pvalues=T, visium=F)
ggpubr::ggarrange(plotlist=kriges4, nrow=1, ncol=1, legend='bottom')
kriges5 <- plot_deconv_krige(melanoma,  cells='b_cells', plot_who=2, purity=T, visium=F)
ggpubr::ggarrange(plotlist=kriges5, nrow=1, ncol=2, common.legend=T, legend='bottom')
kriges4 <- plot_deconv_krige(melanoma,  cells='b_cells', plot_who=2, purity=T, visium=F)
ggpubr::ggarrange(plotlist=kriges4, nrow=1, ncol=2, common.legend=T, legend='bottom')
kriges5 <- plot_deconv_krige(melanoma,  cells='b_cells', plot_who=2, pvalues=T, visium=F)
ggpubr::ggarrange(plotlist=kriges5, nrow=1, ncol=1, legend='bottom')
melanoma <- STclust(melanoma, ks='dtc', weights=c(0, 0.025, 0.05, 0.075))
cluster_p <- plot_STclusters(melanoma, plot_who=2, visium=F)
ggpubr::ggarrange(plotlist=cluster_p, nrow=2, ncol=2, legend='right')
cluster_p <- plot_STclusters(melanoma, plot_who=2, visium=F, ptsize=1)
ggpubr::ggarrange(plotlist=cluster_p, nrow=2, ncol=2, legend='right')
melanoma <- STclust(melanoma, ks='dtc', weights=c(0, 0.05, 0.1, 0.2))
cluster_p <- plot_STclusters(melanoma, plot_who=2, visium=F, ptsize=1)
ggpubr::ggarrange(plotlist=cluster_p, nrow=2, ncol=2, legend='right')
melanoma <- spatial_stat_plot(melanoma, samplevar='survival_months', gene='CD74')
melanoma <- spatial_stat_plot(melanoma, var='survival_months', gene='CD74')
melanoma@clinical
head(spatial_stat_plot)
melanoma <- spatial_stat_plot(melanoma, var='survival_months', gene='CD74')
melanoma <- spatial_stat_plot(melanoma, var='survival_months', gene='CD74')
melanoma <- spatial_stat_plot(melanoma, var='survival_months', gene='CD74')
devtools::load_all('./')
melanoma <- spatial_stat_plot(melanoma, var='survival_months', gene='CD74')
devtools::load_all('./')
melanoma <- spatial_stat_plot(melanoma, var='survival_months', gene='CD74')
#melanoma <- spatial_stat_plot(melanoma, var='survival_months', gene='CD74')
melanoma <- spatial_stat_plot(melanoma, var='survival_months', gene='MS4A1')
#melanoma <- spatial_stat_plot(melanoma, var='survival_months', gene='CD74')
melanoma <- spatial_stat_plot(melanoma, var='survival_months', gene='MLANA')
melanoma <- spatial_stat_plot(melanoma, var='survival_months', gene='CD74')
devtools::load_all('./')
data_files <- system.file("extdata", package="spatialGE")
count_files <- list.files(data_files, full.names=T, pattern='counts')
coord_files <- list.files(data_files, full.names=T, pattern='mapping')
clin_file <- list.files(data_files, full.names=T, pattern='clinical')
melanoma <- STList(rnacounts=count_files, spotcoords=coord_files, samples=clin_file)
melanoma <- spatialTransform(melanoma)
melanoma <- spatial_stat_plot(melanoma, var='survival_months', gene='CD74')
devtools::build()
devtools::check_built('../spatialGE_1.0.0.0000.tar.gz')
devtools::document()
cd ..
pwd
getwd()
setwd(../)
setwd('../')
getwd()
devtools::check_built('spatialGE_1.0.0.0000.tar.gz')
devtools::build('spatialGE/')
devtools::check_built('spatialGE_1.0.0.0000.tar.gz')
devtools::build('../spatialGE/')
devtools::document()
devtools::build('../spatialGE/')
devtools::document()
devtools::load_all('./')
install.packages("pkgdown")
pkgdown::build_site()
pkgdown::build_home_index()
pkgdown::build_home_index()
pkgdown::build_home_index()
pkgdown::build_home_index()
pkgdown::build_home_index()
pkgdown::build_home_index()
pkgdown::build_home_index()
devtools::install_github("fridleylab/spatialGE")
library('spatialGE')
visiumfp <- c('~/Desktop/Visium_FFPE_Human_Normal_Prostate/',
'~/Desktop/Visium_FFPE_Human_Prostate_Cancer/',
'~/Desktop/Visium_FFPE_Human_Prostate_Acinar_Cell_Carcinoma/')
visiumIDs <- c('Normal_Prostate',
'Prostate_Cancer',
'Prostate_Acinar_Cell')
prvisium <- STList(rnacounts=visiumfp, samples=visiumIDs)
prvisium = filter_data(prvisium, spot_maxreads=50000)
qcplots4 = plot_QC_quilt(prvisium, nreads=T)
ggpubr::ggarrange(plotlist=qcplots4, ncol=3, nrow=1, legend='bottom')
prvisium <- spatialTransform(prvisium)
prvisium <- gene_krige(prvisium, genes='KLK3', univ=F, python=T)
kplot <- plot_gene_krige(prvisium, genes='KLK3', color_pal='sunset', image=T)
ggpubr::ggarrange(plotlist=kplot, ncol=2, nrow=3)
pkgdown::build_article('prostatecancer_Visium_vignette')
?mclapply
