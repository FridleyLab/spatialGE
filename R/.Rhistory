cores = count_cores(nrow(combo))
}
result_ls = parallel::mclapply(seq_along(1:nrow(combo)), function(i){
meta1_tmp = as.vector(unlist(combo[i, 1]))
meta2_tmp = as.vector(unlist(combo[i, 2]))
gene_tmp = as.vector(unlist(combo[i, 3]))
# Extract relevant columns from data
expr_tmp = expr_data %>%
dplyr::select(c('group', 'meta', 'xpos', 'ypos'), exprval = !!gene_tmp)
# Calculate log-fold change
avgexpr_ref1 = mean(expr_tmp %>% dplyr::filter(meta == meta1_tmp) %>% dplyr::select(exprval) %>% unlist())
if(pairwise){ # Filter if pairwise tests requested
expr_tmp = expr_tmp %>%
dplyr::filter(meta %in% c(meta1_tmp, meta2_tmp))
avgexpr_ref2 = mean(expr_tmp %>% dplyr::filter(meta == meta2_tmp) %>% dplyr::select(exprval) %>% unlist())
} else{ # Recode other spots/cells if non pairwise
expr_tmp = expr_tmp %>%
dplyr::mutate(meta=factor(dplyr::case_when(meta != meta1_tmp ~ 'metaother',
TRUE ~ meta), levels=c('metaother', meta1_tmp)))
avgexpr_ref2 = mean(expr_tmp %>% dplyr::filter(meta != meta1_tmp) %>% dplyr::select(exprval) %>% unlist())
}
logfold_tmp = (avgexpr_ref1 - avgexpr_ref2)
# Create non-spatial model
res_mod = spaMM::fitme(formula=as.formula('exprval~meta'), data=expr_tmp, method="REML")
return(list(nonspmod=res_mod,
avglfc=logfold_tmp))
}, mc.cores=cores)
rm(expr_data) # Clean environment
# Rename list elements
if(nrow(combo) == length(result_ls)){
models_ls = list()
for(i in 1:nrow(combo)){
meta1_tmp = as.vector(unlist(combo[i, 1]))
meta2_tmp = as.vector(unlist(combo[i, 2]))
gene_tmp = as.vector(unlist(combo[i, 3]))
models_ls[[paste0(gene_tmp, '_', meta1_tmp, '_', meta2_tmp)]] = result_ls[[i]]
}
} else{
stop('The number of gene x cluster combinations, and the number of non-spatial models generated do not match.')
}
return(models_ls)
}
if(verbose == 2L){
cat(crayon::yellow(paste0('\t\tAnnotation: ', meta_dict[['orig_annot']][meta_dict[['coded_annot']] == cls], '...\n')))
}
# Subset combo to relevant cluster
combo_cl = combo_df %>% dplyr::filter(meta1 == cls)
# Run models in parallel and get DE results
non_sp_models = non_spatial_de(expr_data=expr_df, combo=combo_cl, cores=cores, pairwise=pairwise)
non_sp_de
non_sp_models
non_sp_models$F10_c1_c2
length(non_sp_models)
exit
devtools::load_all('../')
vis=readRDS('../../spatialge_stdiff_manuscript/stdiff_hpcrun_spamm/data/visium_stlist_w_clusters_raviglioblastoma.RDS')
vis=STclust(vis, ks=2, ws=c(0,0.025))
ps = STplot(x=stclust_stlist, ks='dtc', ws=c(0,0.08), ptsize=2)
ps = STplot(x=vis, ks='dtc', ws=c(0,0.08), ptsize=2)
q
ps = STplot(x=vis, ks=2, ws=c(0,0.08), ptsize=2)
ps$UKF243_stclust_spw0_k2
vis=STclust(vis, ks=15, ws=c(0,0.025))
ps = STplot(x=vis, ks=15, ws=c(0,0.08), ptsize=2)
ps$UKF243_stclust_spw0_k15
names(ps)
ps = STplot(x=vis, ks=15, ws=c(0,0.025), ptsize=2)
ps$UKF243_stclust_spw0.025_k15
ps$UKF243_stclust_spw0.025_k15 + ps$UKF243_stclust_spw0_k15
khroma::info()
ps = STplot(x=vis, ks=15, ws=c(0,0.025), ptsize=2, color_pal = 'highcontrast')
ps = STplot(x=vis, ks=15, ws=c(0,0.025), ptsize=2)
ps = STplot(x=vis, ks=15, ws=c(0,0.025), ptsize=2, color_pal = 'highcontrast')
ps$UKF243_stclust_spw0_k15
devtools::load_all('../')
x = readRDS('../../spatialge_stdiff_manuscript/stdiff_hpcrun_spamm/data/visium_stlist_w_clusters_raviglioblastoma.RDS')
samples=NULL
annot='annots'
ws=NULL
ks='dtc'
deepSplit=NULL
topgenes=100
pval_thr=0.05
pval_adj='fdr'
sp_topgenes=0
verbose=1
cores=6
clusters=NULL
pairwise=T
test_type='t_test'
x1=rnorm(100, 0, 1)
x2=rnorm(100, 2, 1)
wilcox.test(x1, x2)
t = wilcox.test(x1, x2)
t$p.value
t.test(x1, x2)
t.test(x1)
t.test(x1, x2, alternative = 'o')
t.test(x1, x2, alternative = 'l')
t.test(x1, x2, alternative = 'g')
vis = readRDS('../../spatialge_stdiff_manuscript/stdiff_hpcrun_spamm/data/visium_stlist_w_clusters_raviglioblastoma.RDS')
devtools::load_all('../')
devtools::load_all('../')
vis = readRDS('../../spatialge_stdiff_manuscript/stdiff_hpcrun_spamm/data/visium_stlist_w_clusters_raviglioblastoma.RDS')
test=STdiff(vis, annot = 'annots', pairwise = F, topgenes = 100, sp_topgenes = 0, cores=6, verbose = 1, test_type = 'mm')
View(test)
test=STdiff(vis, annot = 'annots', pairwise = T, topgenes = 100, sp_topgenes = 0, cores=6, verbose = 1, test_type = 'mm')
View(test)
test=STdiff(vis, annot = 'annots', pairwise = F, topgenes = 100, sp_topgenes = 0, cores=6, verbose = 1, test_type = 't_test')
View(test)
test=STdiff(vis, annot = 'annots', pairwise = T, topgenes = 100, sp_topgenes = 0, cores=6, verbose = 1, test_type = 't_test')
View(test)
test=STdiff(vis, annot = 'annots', pairwise = T, topgenes = 100, sp_topgenes = 0, cores=6, verbose = 1, test_type = 'wilcoxon')
vis=readRDS('../../spatialge_stdiff_manuscript/stdiff_hpcrun_spamm/data/visium_stlist_w_clusters_raviglioblastoma.RDS')
test=STdiff(vis, annot = 'annots', pairwise = F, topgenes = 100, sp_topgenes = 0, cores=6, verbose = 1, test_type = 'mm')
devtools::load_all('../')
test=STdiff(vis, annot = 'annots', pairwise = F, topgenes = 100, sp_topgenes = 0, cores=6, verbose = 1, test_type = 'mm')
View(test)
test=STdiff(vis, annot = 'annots', pairwise = T, topgenes = 100, sp_topgenes = 0, cores=6, verbose = 1, test_type = 'mm')
test=STdiff(vis, annot = 'annots', pairwise = F, topgenes = 100, sp_topgenes = 0, cores=6, verbose = 1, test_type = 't_test')
test=STdiff(vis, annot = 'annots', pairwise = T, topgenes = 100, sp_topgenes = 0, cores=6, verbose = 1, test_type = 't_test')
test=STdiff(vis, annot = 'annots', pairwise = F, topgenes = 100, sp_topgenes = 0, cores=6, verbose = 1, test_type = 'wilcoxon')
test=STdiff(vis, annot = 'annots', pairwise = T, topgenes = 100, sp_topgenes = 0, cores=6, verbose = 1, test_type = 'wilcoxon')
x = readRDS('../../spatialge_stdiff_manuscript/stdiff_hpcrun_spamm/data/visium_stlist_w_clusters_raviglioblastoma.RDS')
samples=NULL
annot='annots'
ws=NULL
ks='dtc'
deepSplit=NULL
topgenes=100
pval_thr=0.05
pval_adj='fdr'
sp_topgenes=0
verbose=1
cores=6
clusters=NULL
pairwise=T
test_type='wilcoxon'
zero_t = Sys.time()
topgenes = as.integer(topgenes)
pval_thr = as.double(pval_thr)
sp_topgenes = as.double(sp_topgenes)
verbose = as.integer(verbose)
if(!is.integer(verbose) | !(verbose %in% c(0L, 1L, 2L))){
verbose = 1L
}
# Stop function if topgenes and sp_topgenes are not valid
if((round(topgenes, 0) <= 0) | (sp_topgenes < 0 | sp_topgenes > 1)){
stop('topgenes or sp_topgenes contain invalid values.')
}
# Define samples
if(is.null(samples)){
samples = names(x@spatial_meta)
} else{
if(is.numeric(samples)){
samples = names(x@spatial_meta)[samples]
}
if(length(grep(paste0(samples, collapse='|'), names(x@spatial_meta))) == 0){
stop('The requested samples are not present in the STlist spatial metadata.')
}
}
# Define column to test
if(is.null(annot)){
annot = grep('^stclust_spw', colnames(x@spatial_meta[[1]]), value=T)
if(!is.null(ws)){
if(any(ws == 0)){ # To avoid zero ('0') matching other weights
ws_tmp = ws[ws != 0]
annot_tmp = grep('stclust_spw0_|stclust_spw0$', annot, value=T)
if(length(ws_tmp) > 0){ # In case there are other ws in addition to '0'
annot = c(annot_tmp,
grep(paste0('stclust_spw', ws_tmp, collapse='|'), annot, value=T))
} else{
annot = annot_tmp
}
rm(ws_tmp, annot_tmp)
} else{
annot = grep(paste0('stclust_spw', ws, collapse='|'), annot, value=T)
}
}
if(ks[1] != 'dtc'){
annot = grep(paste0('_k', ks,'$', collapse='|'), annot, value=T)
} else if(ks[1] == 'dtc'){
if(!is.null(deepSplit)){
annot = grep(paste0('_dspl', deepSplit, '$', collapse='|'), annot, value=T)
} else{
annot = grep('_dspl', annot, value=T)
}
} else{
stop('Specify a k value to test, or use ks="dtc" (default).')
}
}
# Check that the meta data column exists (if not in specific sample, remove sample)
samples_tmp = samples
for(i in samples){
if(length(grep(paste0('^', annot, '$', collapse='|'),  colnames(x@spatial_meta[[i]]))) == 0){
samples_tmp = samples_tmp[!(samples_tmp %in% i)]
} else if(length(grep(paste0('^', annot, '$', collapse='|'),  colnames(x@spatial_meta[[i]]))) > 1){
stop('Only one clustering solution or metadata column can be tested at a time.')
}
if(length(samples_tmp) == 0){
stop('No samples left to test. Are the requested annotations/clusters present in at least one sample?')
}
}
samples = samples_tmp
rm(samples_tmp) # Clean env
# Calculate standardized variance for all samples (regardless if sample is not in requested test)
for(i in 1:length(x@tr_counts)){
# Check that vst is not already calculated
if(length(grep('vst.variance.standardized', colnames(x@gene_meta[[i]]))) == 0){
x@gene_meta[[i]] = Seurat::FindVariableFeatures(x@counts[[i]], verbose=F) %>%
tibble::rownames_to_column(var='gene') %>%
dplyr::select('gene', 'vst.variance.standardized') %>%
dplyr::left_join(x@gene_meta[[i]], ., by='gene')
}
}
# Print metadata assignment to be tested
if(grepl('stclust_', annot[1])){
spw_print = stringr::str_extract(annot[1], '(?<=spw)0\\.[0-9]+')
if(grepl('_dspl', annot[1])){
cut_print = stringr::str_extract(annot[1], '(?<=_dspl)[0-9]') %>% paste0('dtc deepSplit=', ., ')...\n')
} else{
cut_print = stringr::str_extract(annot[1], '(?<=_k)[0-9]') %>% paste0('k=', ., ')...\n')
}
test_print = paste0('Testing STclust assignment (w=', spw_print, ', ', cut_print)
rm(spw_print, cut_print) # Clean environment
} else{
test_print = paste0('Testing metadata: ', annot[1], '...\n')
}
if(verbose != 0L){
cat(crayon::green(test_print))
}
rm(test_print) # Clean environment
# Extract sample annotations for each sample
metas = tibble::tibble()
for(sample_name in samples){
metas = dplyr::bind_rows(metas,
tibble::tibble(samplename=sample_name,
meta_orig=as.character(unique(x@spatial_meta[[sample_name]][[annot]]))))
}
# Find variable genes for each sample
genes = tibble::tibble()
for(sample_name in samples){
# Get top variable genes
genes_tmp = x@gene_meta[[sample_name]] %>%
dplyr::arrange(desc(vst.variance.standardized))
if(!is.null(topgenes)){
genes_tmp = genes_tmp %>% dplyr::slice_head(n=topgenes)
}
genes_tmp = genes_tmp %>%
dplyr::select(gene) %>% unlist() %>% as.vector()
genes = dplyr::bind_rows(genes, tibble::tibble(samplename=sample_name, gene=genes_tmp))
rm(genes_tmp) # Clean env
}
# Merge sample names, genes, and annotations in the same data frame
gene_and_meta = dplyr::full_join(genes, metas, by='samplename', multiple='all')
rm(genes, metas) # Clean env
# Create "dictionary" with coded annotations (to avoid potentially problematic characters)
meta_dict = tibble::tibble(orig_annot=unique(gene_and_meta[['meta_orig']]),
coded_annot=paste0('c', 1:length(unique(gene_and_meta[['meta_orig']]))))
# Recode annotations gene_and_meta
for(spotrow in 1:nrow(gene_and_meta)){
gene_and_meta[['meta']][spotrow] = meta_dict[['coded_annot']][ meta_dict[['orig_annot']] == gene_and_meta[['meta_orig']][spotrow] ]
}
rm(spotrow) # Clean env
# Create a table with unique combinations of genes and annotations to test using parallelization
combo_df = prepare_stdiff_combo(to_expand=gene_and_meta, pairwise=pairwise)
rm(gene_and_meta) # Clean env
start_t = Sys.time()
if(test_type == 'mm'){
test_print = 'non-spatial mixed models'
} else if(test_type == 't_test'){
test_print = 'T-tests'
} else{
test_print = "Wilcoxon's tests"
}
if(verbose != 0L){
cat(crayon::green(paste0('\tRunning ', test_print, '...\n')))
}
# Get annotations to run in parellel
clusters = unique(combo_df[['meta1']])
if(pairwise){
clusters = unique(append(clusters, unique(combo_df[['meta2']])))
}
#Paralellize spaMM models
if(is.null(cores)){
cores = count_cores(nrow(combo))
}
non_sp_models = pbmcapply::pbmclapply(1:length(clusters), function(i){
# Subset combo_df to those of a given cluster
combo_clust = combo_df %>%
dplyr::filter(meta1 == clusters[i])
# Loop through samples
res = list()
for(sample_name in unique(combo_clust[['samplename']])){
# Subset combinations per sample
combo_tmp = combo_clust %>% dplyr::filter(samplename == sample_name)
# Create data frame with expression, coordinate, and cluster data
# Add group dummy column and select relevant columns
expr_df = expandSparse(x@tr_counts[[sample_name]]) %>%
tibble::rownames_to_column(var='gene') %>%
dplyr::filter(gene %in% unique(combo_tmp[['gene']])) %>%
tibble::column_to_rownames(var='gene') %>%
t() %>%
as.data.frame() %>%
tibble::rownames_to_column(var='libname') %>%
dplyr::right_join(x@spatial_meta[[sample_name]] %>%
tibble::add_column(group=1, .after='libname') %>%
dplyr::select(c('libname', 'group', 'ypos', 'xpos'), meta_orig:=!!annot[1]),. , by='libname') %>%
tibble::column_to_rownames(var='libname')
# Recode annotations gene_and_meta
for(spotrow in 1:nrow(expr_df)){
expr_df[['meta']][spotrow] = meta_dict[['coded_annot']][ meta_dict[['orig_annot']] == expr_df[['meta_orig']][spotrow] ]
}
rm(spotrow) # Clean env
# Remove original annotation and keep 'meta' as the coded annotations column
expr_df = expr_df %>% dplyr::select(-c('meta_orig')) %>% dplyr::relocate(meta, .before=1)
# Run non-spatial models
if(verbose == 1L){
system(sprintf('echo "%s"', crayon::green(paste0("\n\t\t",
sample_name, ", ",
meta_dict[['orig_annot']][ meta_dict[['coded_annot']] == clusters[i] ],
" (", nrow(combo_clust), " tests)..."))))
}
if(test_type == 'mm'){
res_tmp = non_spatial_de(expr_data=expr_df, combo=combo_tmp, pairwise=pairwise)
} else if(test_type == 't_test' | test_type == 'wilcoxon'){
res_tmp = stdiff_mean_test(expr_data=expr_df, combo=combo_tmp, pairwise=pairwise, test_type=test_type)
}
res = append(res, res_tmp)
rm(res_tmp, expr_df, combo_tmp) # Clean env
}
return(res)
}, mc.cores=cores)
names(non_sp_models) = clusters
}, mc.cores=cores)
names(non_sp_models) = clusters
names(non_sp_models)
# Summarize DE analyses
result_de = tibble::tibble()
names(non_sp_models)
i='c1'
meta_dict
combo_df
names(non_sp_models[[i]])
mod='"UKF243_AC103591.3_c1_c2" '
mod="UKF243_AC103591.3_c1_c2"
sample_tmp = non_sp_models[[i]][[mod]][['samplename']]
gene_tmp = non_sp_models[[i]][[mod]][['gene']]
avglfc_tmp = non_sp_models[[i]][[mod]][['avglfc']]
# Compile results in a row
df_tmp = tibble::tibble(sample=sample_tmp,
gene=gene_tmp,
avg_log2fc=avglfc_tmp,
cluster_1=meta_dict[['orig_annot']][ meta_dict[['coded_annot']] == i ])
vis=readRDS('../../spatialge_stdiff_manuscript/stdiff_hpcrun_spamm/data/visium_stlist_w_clusters_raviglioblastoma.RDS')
test=STdiff(vis, annot = 'annots', pairwise = T, topgenes = 100, sp_topgenes = 0, cores=6, verbose = 1, test_type = 'wilcoxon')
devtools::load_all('../')
test=STdiff(vis, annot = 'annots', pairwise = T, topgenes = 100, sp_topgenes = 0, cores=6, verbose = 1, test_type = 'wilcoxon')
View(test)
list.files(system.file("extdata", package="spatialGE"), recursive=T, full.names=T)
devtools::install_github('FridleyLab/spatialGE@oospina_dev')
library('spatialGE')
list.files(system.file("extdata", package="spatialGE"), recursive=T, full.names=T)
data_files <- list.files(system.file("extdata", package="spatialGE"), recursive=T, full.names=T)
count_files <- grep("counts", data_files, value=T)
coord_files <- grep("mapping", data_files, value=T)
clin_file <- grep("thrane_clinical", data_files, value=T)
melanoma <- STlist(rnacounts=count_files, spotcoords=coord_files, samples=clin_file)
melanoma
devtools::load_all('../')
visium_folders <- list.dirs('~/Desktop/tnbc_visium/', full.names=T, recursive=F)
data_files <- system.file("extdata/tnbc_bassiouni", package="spatialGE")
clin_file <- list.files(data_files, full.names=T, recursive=F, pattern='clinical')
tnbc <- STlist(rnacounts=visium_folders, samples=clin_file)
tnbc
summarize_STlist(tnbc)
cp = distribution_plots(tnbc, plot_type='violin', plot_meta='total_counts')
cp[['total_counts']]
tnbc = filter_data(tnbc, spot_minreads=5000, spot_mingenes=1000, spot_maxreads=150000)
cp2 = distribution_plots(tnbc, plot_type='violin', plot_meta='total_counts')
cp2[['total_counts']]
tnbc = pseudobulk_samples(tnbc, max_var_genes=5000)
pseudobulk_pca_plot(tnbc, plot_meta='patient_id')
pseudobulk_heatmap(tnbc, plot_meta='patient_id', hm_display_genes=30)
tnbc <- transform_data(tnbc, method='log')
quilts1 <- STplot(tnbc,
genes=c('NDRG1', 'IGKC'),
samples='sample_094c',
color_pal='BuRd',
ptsize=0.8)
ggpubr::ggarrange(plotlist=quilts1, nrow=1, ncol=2, legend='bottom')
tnbc <- gene_interpolation(tnbc,
genes=c('NDRG1', 'IGKC'),
samples=c('sample_094c', 'sample_117e'))
kriges1 <- STplot_interpolation(tnbc,
genes=c('NDRG1', 'IGKC'),
samples='sample_094c')
ggpubr::ggarrange(plotlist=kriges1, nrow=1, ncol=2, common.legend=T, legend='bottom')
tnbc <- STclust(tnbc,
ks='dtc',
ws=c(0, 0.025, 0.05, 0.2))
cluster_p <- STplot(tnbc,
samples='sample_094c',
ws=c(0, 0.025, 0.05, 0.2),
ptsize=1)
ggpubr::ggarrange(plotlist=cluster_p, nrow=2, ncol=2, legend='right')
cluster_p <- STplot(tnbc,
samples='sample_094c',
ws=c(0, 0.025, 0.05, 0.2),
ptsize=1)
ggpubr::ggarrange(plotlist=cluster_p, nrow=2, ncol=2, legend='right')
cluster_p <- STplot(tnbc,
samples='sample_094c',
ws=c(0, 0.025, 0.05, 0.2))
ggpubr::ggarrange(plotlist=cluster_p, nrow=2, ncol=2, legend='right')
cluster_p <- STplot(tnbc,
samples='sample_094c',
ws=c(0, 0.025, 0.05, 0.2),
color_pal='highcontrast')
ggpubr::ggarrange(plotlist=cluster_p, nrow=2, ncol=2, legend='right')
tnbc <- SThet(tnbc,
genes=c('NDRG1', 'IGKC'),
method='moran')
?stats::dist
?wordspace::dist.matri
?wordspace::dist.matrix
devtools::load_all('../')
install.packages()
install.packages('microbenchmark')
microbenchmark::microbenchmark(list = list(old=STclust(tnbc, ks='dtc', ws=c(0, 0.025)),
new=STclust(tnbc, ks='dtc', ws=c(0, 0.025))),
times=10L)
microbenchmark::microbenchmark(list = list(old=STclust(tnbc, ks='dtc', ws=c(0, 0.025)),
new=STclust_2(tnbc, ks='dtc', ws=c(0, 0.025))),
times=10L)
STclust_2(tnbc, ks='dtc', ws=c(0, 0.025))
microbenchmark::microbenchmark(list = list(old=STclust(tnbc, ks='dtc', ws=c(0, 0.025)),
new=STclust_2(tnbc, ks='dtc', ws=c(0, 0.025))),
times=3L)
old=STclust(tnbc, ks='dtc', ws=c(0, 0.025))
new=STclust_2(tnbc, ks='dtc', ws=c(0, 0.025))
STplot(old, samples = 1)
STplot(old, samples = 1, ws=0.25, ptsize = 2)
STplot(old, samples = 1, ws=0.025, ptsize = 2)
STplot(new, samples = 1, ws=0.025, ptsize = 2)
STplot(new, samples = 1, ws=0.025, ptsize = 2) + Tplot(old, samples = 1, ws=0.025, ptsize = 2)
STplot(new, samples = 1, ws=0.025, ptsize = 2) + STplot(old, samples = 1, ws=0.025, ptsize = 2)
STplot(new, samples = 1, ws=0.025, ptsize = 2)[[1]] + STplot(old, samples = 1, ws=0.025, ptsize = 2)[[1]]
STplot(new, samples = 1, ws=0.025, ptsize = 1)[[1]] + STplot(old, samples = 1, ws=0.025, ptsize = 1)[[1]]
old=STclust(tnbc, ks='dtc', ws=c(0, 0.03))
new=STclust_2(tnbc, ks='dtc', ws=c(0, 0.03))
STplot(new, samples = 1, ws=0.03, ptsize = 1)[[1]] + STplot(old, samples = 1, ws=0.03, ptsize = 1)[[1]]
mc = microbenchmark::microbenchmark(list = list(old=STclust(tnbc, ks='dtc', ws=c(0, 0.04)),
new=STclust_2(tnbc, ks='dtc', ws=c(0, 0.04))), times=10L)
start_t = Sys.time()
old=STclust(tnbc, ks='dtc', ws=c(0, 0.03))
print(difftime(start_t - Sys.time()))
start_t = Sys.time()
new=STclust_2(tnbc, ks='dtc', ws=c(0, 0.03))
start_t = Sys.time()
old=STclust(tnbc, ks='dtc', ws=c(0, 0.015))
print(difftime(start_t - Sys.time()))
start_t = Sys.time()
old=STclust(tnbc, ks='dtc', ws=c(0, 0.015))
difftime(start_t - Sys.time())
difftime(start_t, Sys.time())
start_t = Sys.time()
old=STclust(tnbc, ks='dtc', ws=c(0, 0.015))
difftime(Sys.time(), start_t)
start_t = Sys.time()
new=STclust_2(tnbc, ks='dtc', ws=c(0, 0.015))
difftime(Sys.time(), start_t)
p = compare_SThet(tnbc,
samplemeta='overall_survival_days',
color_by='patient_id',
gene=c('NDRG1', 'IGKC'))
print(p)
print(p)
print(p)
p
p = compare_SThet(tnbc,
samplemeta='overall_survival_days',
color_by='patient_id',
gene=c('NDRG1', 'IGKC'),
color_pal='highcontrast')
p
p = compare_SThet(tnbc,
samplemeta='overall_survival_days',
color_by='patient_id',
gene=c('NDRG1', 'IGKC'),
color_pal='bright')
p
p = compare_SThet(tnbc,
samplemeta='overall_survival_days',
color_by='patient_id',
gene=c('NDRG1', 'IGKC'),
color_pal='discreterainbow')
p
sphet_info <- tibble::tibble("Low"=c('Dispersion', 'Clustering'),
"Statistic"=c('Moran’s I', 'Geary’s C'),
"High"=c('Clustering', 'Dispersion')
)
kableExtra::kbl(sphet_info, align='c', centering=T) %>%
kableExtra::kable_styling(position="center", full_width=F)
sphet_info <- tibble::tibble("Low"=c('Dispersion', 'Clustering'),
"Statistic"=c('Moran’s I', 'Geary’s C'),
"High"=c('Clustering', 'Dispersion')
)
kableExtra::kbl(sphet_info, align='c', centering=T) %>%
kableExtra::kable_styling(position="center", full_width=F)
tnbc@gene_meta[['sample_094c']] %>%
dplyr::filter(gene %in% c('IGKC', 'NDRG1'))
